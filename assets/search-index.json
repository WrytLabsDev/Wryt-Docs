[
  {
    "id": "core",
    "title": "FusionEditor",
    "content": " Fusion Editor Fusion Editor is a powerful and versatile text editor designed to bring together the best of Markdown, WYSIWYG, and block editor functionalities into a single, seamless environment. Built on the robust foundations of Prosemirror and Tiptap, Fusion Editor offers an intuitive and flexible editing experience, whether you're writing in plain text, crafting rich HTML content, or organizing your work with blocks. Key Features - Markdown Support: Seamlessly toggle between Markdown and WYSIWYG modes. - WYSIWYG Editing: Rich text editing with intuitive controls and formatting options. - Block Editor: Organize your content with blocks for quotes, code snippets, images, and more. HTML5 Standards and Best Practices Fusion Editor is designed with a focus on producing clean, accessible, and semantically correct HTML5 content. Here are the guidelines and best practices that Fusion Editor enforces: 1. Semantic HTML - Use Proper HTML Elements: - <p> for paragraphs. - <h1> to <h6> for headings. - <ul>, <ol>, and <li> for lists. - <blockquote> for block quotes. - <code> or <pre> for code snippets. - Avoid using <div> and <span> unless necessary for layout or styling. - Encourage Best Practices: - Guide users to use proper heading levels, starting with <h1> and nesting logically. - Use semantic elements like <strong> and <em> instead of <b> and <i>. 2. Accessibility - ARIA Compliance: - Support ARIA roles and attributes where necessary. - Ensure elements like forms, tables, and images include appropriate aria-label, alt, and title attributes. - Keyboard Navigation: - All editing actions can be performed using the keyboard. - The editor is fully navigable with screen readers. - Heading Structure: - Enforce a logical heading structure, crucial for screen reader users. 3. Clean and Structured HTML - Avoid Redundant Wrapping: - Prevent unnecessary nesting of elements (e.g., avoid wrapping a <p> inside a <div> unless required). - Minimal Inline Styles: - Encourage the use of CSS classes over inline styles for consistency and maintainability. 4. Content Flexibility - Markdown Conversion: - Ensure clean conversion between Markdown and HTML without losing content integrity. - Block Editor Features: - Encourage the use of blocks for organizing content, like quotes, code, and images. 5. HTML5 Compliance - Use HTML5 Doctype: - Ensure content produced is compliant with HTML5 standards. - Media Elements: - Support modern media elements like <video>, <audio>, and <figure>. - Encourage the use of <figure> and <figcaption> for images with captions. 6. Best Practices for Div and Paragraph Usage - Div for Layout, P for Text: - Use <div> for layout purposes only, ensuring it doesn’t disrupt the semantic flow. - Enforce the use of <p> for text content. - Block-Level Considerations: - Ensure block-level elements like <div>, <section>, <article>, and <aside> are used correctly for structuring content. 7. Modular and Extensible Design - Customization: - Allow users to define their own styles and templates while enforcing the semantic structure. - Provide options to extend or customize the editor with plugins or extensions adhering to these standards. Conclusion Fusion Editor is designed to produce clean, accessible, and semantically correct content that adheres to HTML5 standards. By following these best practices, Fusion Editor ensures that the content created is of the highest quality, compatible across platforms, and accessible to all users. ",
    "url": "/core"
  },
  {
    "id": "core",
    "title": "README",
    "content": " core This library was generated with [Nx](https://nx.dev). Running unit tests Run nx test core to execute the unit tests. ",
    "url": "/core"
  },
  {
    "id": "core",
    "title": "Semantics",
    "content": " Fusion Editor: Ensuring Best Practices for HTML5 and SEO | Semantic HTML Overview Fusion Editor is designed to enforce best practices and standards for HTML5, ensuring that content is semantically correct, accessible, and optimized for SEO. Proper use of HTML elements like <p>, <div>... <etc> plays a crucial role in achieving this. Semantic HTML is the use of HTML markup to reinforce the semantics, or meaning, of the information in web pages and web applications rather than merely to define its presentation or look. Semantic HTML is processed by traditional web browsers as well as by many other user agents. CSS is used to suggest its presentation to human users. Adhering to HTML standards and following best practices has significant benefits beyond just ensuring your content renders correctly. Here's why educating users about these implications is crucial and how it impacts the overall user experience, SEO, and other factors: SEO and Search Rankings - Semantic HTML: Using the correct HTML elements for their intended purpose helps search engines understand the structure and content of your pages. For example, using <address> for contact information, <p> for paragraphs, and <h1> to <h6> for headings improves the semantic meaning of your content. - Accessibility: Properly structured HTML is more accessible to screen readers and assistive technologies, which improves the user experience for people with disabilities. Accessibility is also increasingly considered by search engines like Google when ranking pages. - Crawlability: Search engines use bots to crawl and index web pages. When HTML is well-structured and adheres to standards, it's easier for these bots to navigate and index your content, potentially improving your search engine rankings. User Experience: - Consistent Rendering: Valid HTML ensures that your content renders consistently across different browsers and devices. This leads to a better user experience, as users can trust that your content will look the same whether they're on a desktop, tablet, or mobile device. - Faster Loading Times: Clean, well-structured HTML can lead to faster page load times. This is because browsers can parse and render the page more efficiently, which is especially important for mobile users and contributes positively to your SEO as well. - Maintainability: Following HTML best practices makes your code easier to maintain, update, and debug. This means fewer errors and a smoother experience for both developers and users. Technical Implications: - Content Integrity: Understanding how certain HTML elements interact (e.g., <p> not being able to contain <div>) helps prevent structural issues in your content. Educating users and developers about these rules ensures that they can create and edit content without inadvertently breaking the layout or functionality. - Future-Proofing: Web standards evolve, but they do so with backward compatibility in mind. By adhering to current best practices, you ensure that your content is more likely to remain valid and functional as web technologies advance. Educating Users: - Documentation: Including explanations and examples in your documentation (like in the README.md files) helps users understand the implications of their choices. It empowers them to make informed decisions that enhance the quality and effectiveness of their content. - Error Handling: Implementing user-friendly error messages or warnings in your editor when users try to perform invalid actions (like nesting a <div> inside a <p>) can guide them towards better practices. Block-Level Elements and Their Usage Paragraph (<p>) Tag The <p> tag is meant to wrap blocks of text, representing a paragraph in HTML. According to HTML5 standards, the <p> tag should not contain other block-level elements such as <div> or <etc>. Instead, it should only enclose inline elements or text. Example html <p>This is a paragraph of text. It should not contain other block-level elements like <div> or <address>.</p> Division (<div>) Tag The <div> tag is a generic container that can be used to group together both block-level and inline elements. Unlike the <p> tag, <div> can contain other block-level elements such as <p> or <address>. html <div> <p>This is a paragraph inside a div.</p> <address> <a href=\"mailto:jim@example.com\">jim@example.com</a><br /> <a href=\"tel:+14155550132\">+1 (415) 555‑0132</a> </address> </div> By educating users and enforcing best practices through your editor, you're not just ensuring that their content looks good—you're also helping them achieve better SEO, accessibility, and overall user experience. This approach leads to more professional, polished, and effective web content, which benefits both the content creators and their audience. Learn and Build with Fusion Editor - Fusion Editor is more than just a text editor—it's a tool to help you learn and build while enforcing good practices. As you create extensions and document your journey, you'll gain a deeper understan",
    "url": "/core"
  },
  {
    "id": "extension-abbr",
    "title": "README",
    "content": " Abbr Extension - extension-abbr The Abbr extension for Fusion adds support for the <abbr> HTML tag, enabling you to define abbreviations in your content with a title attribute that provides additional context. This extension is useful for enhancing the readability and accessibility of content where abbreviations or acronyms are used. Features - Abbreviation Mark: Adds the <abbr> tag, allowing you to wrap text with an abbreviation and a title attribute. - Title Attribute: Provides a title attribute to describe the abbreviation, which can be displayed as a tooltip when the user hovers over the abbreviation. - Commands: Includes commands to set and unset the abbreviation mark, providing flexibility in content creation. - Keyboard Shortcuts: Supports a keyboard shortcut for toggling abbreviations, making it easier to apply this formatting quickly. Installation To integrate the Abbr extension into your Fusion editor, you'll need to install the core Fusion library. If you haven’t already done so, you can install it using npm: bash npm install @fusion/core Set Abbreviation This command wraps the selected text in an <abbr> tag with the specified title attribute. Example usage typescript editor.commands.setAbbr({ title: 'Hypertext Markup Language' }); Unset Abbreviation: This command removes the abbreviation mark from the selected text. typescript editor.commands.unsetAbbr(); Example Here’s an example of what the HTML output might look like when using the [Abbr](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr) extension: html <p> This is an example of an <abbr title=\"Hypertext Markup Language\">HTML</abbr> abbreviation. </p> ",
    "url": "/extension-abbr"
  },
  {
    "id": "extension-address",
    "title": "README",
    "content": " Address Extension - extension-address Overview The Address extension for Fusion Editor introduces the ability to use the <address> HTML element within your editor. The <address> element indicates that the enclosed HTML provides contact information for a person, people, or an organization. This extension is built to conform to HTML5 standards and best practices. Installation To use the Address extension in your editor, you can import and include it in your Tiptap extensions setup. javascript import { Address } from './extensions/Address'; const editor = new Editor({ extensions: [ // other extensions Address, ], }); HTML Output This extension will render content within an <address> element, with support for custom attributes like class and id. html <address class=\"contact-info\" id=\"company-address\"> 1234 Elm Street, Springfield, USA </address> Commands SetAddress typescript editor.commands.setAddress({ class: 'contact-info', id: 'company-address', }); Usage Notes - The <address> element should not be used for arbitrary addresses (e.g., home addresses), but specifically for contact information. - It should not be used inside an <article> or <section> element if the contact information is not relevant to that section. ",
    "url": "/extension-address"
  },
  {
    "id": "extension-article",
    "title": "README",
    "content": " Article Extension for Fusion Editor - @fusion/extension-article Overview The Article extension provides support for the <article> element in Fusion Editor. The <article> tag is a semantic element that represents a self-contained composition in a document, page, application, or site. This extension ensures that your content is well-structured and semantically meaningful, which is beneficial for both accessibility and SEO. The <article> element is designed for content that is self-contained and independently distributable. This can include blog posts, news stories, comments, and other similar types of content. Features - Semantic Structure: Supports the <article> tag, allowing for better content organization. - Customizable HTML Attributes: Allows customization of attributes for the <article> tag. - Nested Articles: Supports nested <article> elements for complex content structures. - Automatic Handling: Automatically handles permitted content and parents, ensuring valid HTML structure. Configuration Default Configuration The Article extension is configured with the following defaults: - Name: article - Group: block - Content: block+ - Parse HTML: Recognizes and processes <article> tags when parsing HTML input. - Render HTML: Outputs <article> tags with any additional HTML attributes. - Priority: 1000 Commands This extension provides a command to toggle the article element: typescript // Setting an article node editor.commands.setArticle({ class: 'my-article', id: 'article1' }); // Unsetting an article node editor.commands.unsetArticle(); Example Here’s how to use the Article extension in your Fusion Editor setup: typescript import { Article } from '@fusion/extension-article'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Article, // other extensions... ], }); HTML Output Example html <article> <h1>Article Title</h1> <p>This is the content of the article.</p> </article> ",
    "url": "/extension-article"
  },
  {
    "id": "extension-aside",
    "title": "README",
    "content": " Aside Extension for Fusion Editor - @fusion/extension-aside Overview The Aside extension provides support for the <aside> element in Fusion Editor. The <aside> tag is a semantic HTML element used to represent content that is tangentially related to the content around it. This can include sidebars, pull quotes, and other similar types of content. The extension ensures that your content is organized and semantically meaningful, which is beneficial for accessibility and SEO. The <aside> element is designed for content that is related to the main content but can be considered separate. This is commonly used for sidebars, pull quotes, and similar content. Features - Semantic Structure: Supports the <aside> tag, allowing for the inclusion of tangential content. - Customizable HTML Attributes: Allows customization of attributes for the <aside> tag. - Content Organization: Helps in structuring content that is related to the main content but can stand alone. - Automatic Handling: Ensures that the <aside> element is used correctly within the document structure. Configuration Default Configuration The Aside extension is configured with the following defaults: - Name: aside - Group: block - Content: block+ - Parse HTML: Recognizes and processes <aside> tags when parsing HTML input. - Render HTML: Outputs <aside> tags with any additional HTML attributes. - Priority: 1000 Commands typescript // Setting an aside node editor.commands.setAside({ class: 'my-aside', id: 'aside1' }); // Unsetting an aside node editor.commands.unsetAside(); Example Here’s how to use the Aside extension in your Fusion Editor setup: typescript import { Aside } from '@fusion/extension-aside'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Aside, // other extensions... ], }); HTML Output html <aside> <p>This is a sidebar or other tangential content.</p> </aside> ",
    "url": "/extension-aside"
  },
  {
    "id": "extension-base",
    "title": "README",
    "content": " Base Extension for Fusion Editor - @fusion/extension-base Overview The Base extension provides support for the <base> element in Fusion Editor. The <base> element is used to specify a base URL and a default target for all relative URLs in a document. This extension allows you to define and manipulate the <base> element within your editor setup. This extension is ideal for documents that require a base URL setting, particularly in environments where multiple relative links need to be aligned with a single base URL. The base tag is typically used in the <head> of an HTML document. Features - Base URL Support: Allows the use of the <base> element to define a base URL for relative links in the document. - Customizable HTML Attributes: Supports href and target attributes with customization options. - Non-Selectable Node: The <base> element is non-selectable, maintaining its structural role without direct user interaction. Attributes - href: Specifies the base URL for all relative URLs in the document. - target: Specifies the default target for all hyperlinks and forms. Configuration Default Configuration - Name: base - Group: block (though it doesn't render visible content, it's treated as a block-level element for structural reasons) - Atom: true (treated as an atomic node, meaning it can’t have child nodes) - Selectable: false (not selectable in the editor) - Defining: true (defines a unique identity within the document) - Parse HTML: Recognizes the <base> tag when parsing HTML input. - Render HTML: Outputs a <base> tag with any additional HTML attributes. - Priority: 1000 (Ensures that the base extension takes precedence in scenarios with potential conflicts.) Example typescript import { Base } from '@fusion/extension-base'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Base, / other extensions /], }); HTML Output html <base href=\"https://example.com/\" target=\"_blank\"> ",
    "url": "/extension-base"
  },
  {
    "id": "extension-blockquote",
    "title": "README",
    "content": " Blockquote Extension for Fusion Editor - @fusion/extension-blockquote Overview The Blockquote extension provides support for the <blockquote> element in Fusion Editor. Blockquotes are used to represent content that is quoted from another source, and this extension allows you to create, toggle, and manipulate blockquotes within your documents. Features - Blockquote Support: Enables the use of <blockquote> elements to represent quoted content. - Customizable HTML Attributes: Supports cite and other HTML attributes for blockquotes. - Keyboard Shortcuts: Provides a default keyboard shortcut for quickly toggling blockquotes. - Input Rules: Automatically formats text as a blockquote when a > character is used at the beginning of a line. Configuration Default Configuration - Name: blockquote - Group: block (Blockquotes are treated as block-level elements.) - Content: block+ (Allows block-level content inside the blockquote.) - Defining: true (Defines a unique identity within the document.) - Parse HTML: Recognizes the <blockquote> tag when parsing HTML input. - Render HTML: Outputs a <blockquote> tag with any additional HTML attributes. - Priority: 1000 (Ensures that the blockquote extension takes precedence in scenarios with potential conflicts.) Attributes - cite: Specifies the source URL of the quote, typically included as a cite attribute. Keyboard Shortcuts - Mod-Shift-B: Toggles the selected content as a blockquote. Input Rules - Blockquote Input Rule: Automatically transforms text starting with > followed by a space into a blockquote. Commands typescript // Example of setting a blockquote editor.commands.setBlockquote(); // Example of toggling a blockquote editor.commands.toggleBlockquote(); // Example of unsetting a blockquote editor.commands.unsetBlockquote(); Example typescript import { Blockquote } from '@fusion/extension-blockquote'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Blockquote, / other extensions /], }); HTML Output html <blockquote cite=\"https://example.com\"> <p>Your quoted content here.</p> </blockquote> ",
    "url": "/extension-blockquote"
  },
  {
    "id": "extension-bold",
    "title": "README",
    "content": " Bold Extension for Fusion Editor - @fusion/extension-bold Overview The Bold extension enables bold text formatting in the Fusion Editor. This extension provides support for bold text using various HTML tags and styles, and includes input and paste rules for markdown-like syntax. Features - Bold Text Support: Enables the use of <strong> and <b> elements for bold text. - Markdown-like Syntax: Supports bold and __bold__ syntax for easy input and pasting. - Customizable HTML Attributes: Allows customization of HTML attributes for bold elements. - Keyboard Shortcuts: Provides default keyboard shortcuts for toggling bold formatting. Configuration Default Configuration - Name: bold - Group: inline - Parse HTML: Recognizes <strong>, <b>, and styles with font-weight as bold text. - Render HTML: Outputs <strong> tags with any additional HTML attributes. - Priority: 1000 (Ensures that the bold extension takes precedence in scenarios with potential conflicts.) Keyboard Shortcuts - Mod-b / Mod-B: Toggles bold formatting for the selected text. Input Rules - bold: Wraps the selected text in to make it bold. - __bold__: Wraps the selected text in __ to make it bold. Paste Rules - bold: Automatically converts bold into bold text when pasted. - __bold__: Automatically converts __bold__ into bold text when pasted. Commands - setBold: Applies bold formatting to the selected text. - toggleBold: Toggles bold formatting on or off for the selected text. - unsetBold: Removes bold formatting from the selected text. Example typescript import { Bold } from '@fusion/extension-bold'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Bold, / other extensions /], }); HTML Output html <strong>bold text</strong> ",
    "url": "/extension-bold"
  },
  {
    "id": "extension-break",
    "title": "README",
    "content": " Break Extension for Fusion Editor - @fusion/extension-break Overview The Break extension provides support for inserting line breaks (<br> elements) in Fusion Editor. This extension allows users to add hard breaks in their content while optionally preserving any active text formatting marks. This extension is especially useful in content creation scenarios where explicit line breaks are necessary, such as poetry, addresses...etc. Features - Line Break Support: Enables the insertion of <br> elements to create hard line breaks within content. - Control Over Marks: Provides an option to keep or discard formatting marks when a line break is inserted. - Customizable HTML Attributes: Supports customization of HTML attributes for the <br> tag. - Keyboard Shortcuts: Common shortcuts like Mod-Enter and Shift-Enter are provided for inserting line breaks. Configuration Default Configuration - Name: break - Group: inline - Selectable: false - Atom: true - Inline: true - Keep Marks: true (Default behavior is to retain formatting marks after a line break.) - Parse HTML: Recognizes the <br> tag when parsing HTML input. - Render HTML: Outputs a <br> tag with any additional HTML attributes. - Render Text: Returns \\n to indicate a line break in plain text Commands - setBreak: Inserts a line break (<br> tag) into the content. typescript editor.commands.setBreak(); Keyboard Shortcuts - Mod-Enter: Inserts a line break. - Shift-Enter: Inserts a line break. Customization Options - keepMarks: (boolean) Controls whether text formatting marks (like bold or italic) are kept after the break. Defaults to true. typescript Break.configure({ keepMarks: false }); - HTMLAttributes: (Record<string, any>) Allows customization of the HTML attributes for the <br> element. typescript Break.configure({ HTMLAttributes: { class: 'my-custom-class' } }); Example Usage typescript import { Break } from '@fusion/extension-break'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Break.configure({ keepMarks: true }), / other extensions / ], }); HTML Output html <p> O’er all the hilltops<br /> Is quiet now,<br /> In all the treetops<br /> Hearest thou<br /> Hardly a breath;<br /> The birds are asleep in the trees:<br /> Wait, soon like these<br /> Thou too shalt rest. </p> ",
    "url": "/extension-break"
  },
  {
    "id": "extension-bubble-menu",
    "title": "README",
    "content": " extension-bubble-menu This library was generated with [Nx](https://nx.dev). Running unit tests Run nx test extension-bubble-menu to execute the unit tests. ",
    "url": "/extension-bubble-menu"
  },
  {
    "id": "extension-button",
    "title": "README",
    "content": " Button Extension for Fusion Editor - @fusion/extension-button Overview The Button extension provides support for <button> elements in Fusion Editor. This extension allows you to create and manage buttons, which can be used for various interactive elements within the editor. The extension is designed to work seamlessly with other inline content and can be customized with various attributes. Features - Button Element Support: Enables the use of <button> elements to create interactive content. - Customizable HTML Attributes: Allows customization of HTML attributes for buttons, such as class, type, id, etc. - Content Handling: Supports inline content inside the button. - Keyboard Shortcuts: Provides a default keyboard shortcut for toggling buttons. Configuration Default Configuration The Button extension comes with sensible defaults that are suitable for most use cases. Here’s a breakdown of its configuration: - Name: button or inlineButton - Group: inline or block - Content: inline (Allows inline content, such as text or icons, to be placed inside the button.) - Parse HTML: Recognizes <button> tags when parsing HTML input. - Render HTML: Outputs <button> tags with any additional HTML attributes. - Selectable: true (Allows the button to be selected.) - Inline: true (The button is treated as inline content.) - Atom: false (The button can contain other inline content.) Example Usage typescript import { Button } from '@fusion/extension-button'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Button.configure({ HTMLAttributes: { class: 'btn-primary' } }), // It's Optional to set HTMLAttributes InlineButton, / other extensions / ], }); HTML Output html <p>Click this <button class=\"btn-primary\" type=\"button\">Button</button> for action.</p> Commands For Button - setButton: Creates a new button node with the specified attributes. typescript editor.commands.setButton({ class: 'btn-primary', type: 'submit' }); - unsetButton: Removes the button node. typescript editor.commands.unsetButton(); For Inline Button - setInlineButton: Creates a new button node with the specified attributes. typescript editor.commands.setInlineButton({ type: 'button' }); - unsetInlineButton: Removes the button node. typescript editor.commands.unsetInlineButton(); - toggleButton: Toggles the button node on or off. typescript editor.commands.toggleInlineButton(); ",
    "url": "/extension-button"
  },
  {
    "id": "extension-canvas",
    "title": "README",
    "content": " Canvas Extension for Fusion Editor - @fusion/extension-canvas Overview The Canvas extension provides support for <canvas> elements in Fusion Editor. This extension allows you to create and manage canvas elements, which can be used for drawing graphics via scripting (usually JavaScript). The extension follows the technical summary and attributes defined for the <canvas> tag. Features - Canvas Element Support: Enables the use of <canvas> elements for drawing graphics. - Customizable HTML Attributes: Allows customization of HTML attributes for the canvas, such as width, height, etc. - Content Handling: Although typically empty, the canvas element can have fallback content. - Keyboard Shortcuts: Provides a default keyboard shortcut for toggling canvas elements. Technical Summary Content Categories - Flow content: The canvas can be placed in places where flow content is accepted. - Phrasing content: While typically empty, the canvas can contain fallback content. - Embedded content: The canvas is considered embedded content. - Palpable content: The canvas is perceivable by the user. Attributes - width: Defines the width of the canvas in pixels. The default value is 300. - height: Defines the height of the canvas in pixels. The default value is 150. Commands - setCanvas: Creates a new canvas node with the specified attributes. typescript editor.commands.setCanvas({ width: '500', height: '300' }); - toggleCanvas: Toggles the canvas node on or off. typescript editor.commands.toggleCanvas({ width: '500', height: '300' }); - unsetCanvas: Removes the canvas node. typescript editor.commands.unsetCanvas(); Configuration Default Configuration The Canvas extension comes with sensible defaults that are suitable for most use cases. Here’s a breakdown of its configuration: - Name: canvas - Group: block - Content: inline (Allows inline content, such as text or other inline elements, as fallback content inside the canvas.) - Parse HTML: Recognizes <canvas> tags when parsing HTML input. - Render HTML: Outputs <canvas> tags with any additional HTML attributes. - Atom: true (The canvas is treated as a self-contained element.) Example Usage typescript import { Canvas } from '@fusion/extension-canvas'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Canvas.configure({ HTMLAttributes: { width: '500', height: '300' } }), / other extensions / ], }); HTML Output html <canvas width=\"500\" height=\"300\">Your browser does not support the canvas element.</canvas> ",
    "url": "/extension-canvas"
  },
  {
    "id": "extension-character-count",
    "title": "README",
    "content": " CharacterCount Extension - extension-character-count The CharacterCount extension for Tiptap allows you to monitor and control the number of characters and words in a document. It provides configurable options such as setting limits, determining calculation modes, and defining custom counter functions for characters and words. --- Features - Character Counting: Count characters using either textContent or nodeSize. - Word Counting: Calculate the number of words in the document. - Character Limits: Define a maximum character count and trim the content if it exceeds the limit. - Custom Counter Functions: Use your own logic for character or word counting. - Configurable Modes: Choose between textSize or nodeSize for size calculations. - Automatic Trimming: Removes excess content when the document exceeds the character limit. --- Attributes | Attribute | Type | Default | Description | |--------------|------------------------|------------|---------------------------------------------------| | limit | number | null | null | Maximum allowed characters. | | mode | 'textSize' | 'nodeSize' | 'textSize' | Defines the counting method. | | textCounter| (text: string) => number | text.length | Function to calculate character count. | | wordCounter| (text: string) => number | split(' ').filter(...).length | Function to calculate word count. | --- Storage | Method | Parameters | Description | |--------------|------------------------------------|---------------------------------------------------| | characters | { node, mode } | Gets the number of characters in a node or document. | | words | { node } | Gets the number of words in a node or document. | --- Commands No explicit commands are exposed by this extension. Its functionality is designed to work seamlessly in the background. --- Configuration Default Options typescript CharacterCount.create({ limit: null, mode: 'textSize', textCounter: text => text.length, wordCounter: text => text.split(' ').filter(word => word !== '').length, }); Example Usage typescript const characterCount = CharacterCount.create({ limit: 180, // Set a character limit mode: 'textSize', // Use text content for size calculation textCounter: text => [...new Intl.Segmenter().segment(text)].length, // Custom character counter wordCounter: text => text.split(/\\s+/).filter(word => word !== '').length, // Custom word counter }); --- Behavior - Initial Content Validation: Automatically trims content if it exceeds the character limit when the document is first loaded. - Transaction Filtering: Blocks transactions that would exceed the character limit unless they result in content reduction. --- Example HTML Output html <p>This is an example paragraph with a maximum character limit.</p> --- Notes - Pasting Content: When content is pasted, the extension ensures that it stays within the character limit by trimming excess characters. - Transaction Safety: Handles transactions safely without causing inconsistencies in the document structure. Feel free to adjust the extension to suit your needs. If you encounter any issues, review the filterTransaction logic or adjust the default counters. ",
    "url": "/extension-character-count"
  },
  {
    "id": "extension-cite",
    "title": "README",
    "content": " Cite Extension for Fusion Editor - @fusion/extension-cite Overview The Cite extension provides support for <cite> elements in Fusion Editor. This extension allows you to create and manage citations in your content, typically used to reference the title of a work, such as a book, article, or play. Features - Cite Element Support: Enables the use of <cite> elements to add citations to your content. - Customizable HTML Attributes: Allows customization of HTML attributes for the cite, such as class, id, etc. - Content Handling: The cite element can contain text and other inline elements. - Keyboard Shortcuts: Provides a default keyboard shortcut for toggling cite elements. Technical Summary Content Categories - Phrasing content: The cite element is part of the phrasing content category and can be used where phrasing content is expected. - Flow content: The cite element can be used in places where flow content is accepted. - Palpable content: The cite element is perceivable by the user and contributes to the document's meaning. Attributes - Global attributes: The cite element supports all global attributes. Commands - setCite: Creates a new cite node with the specified attributes. typescript editor.commands.setCite({ class: 'citation' }); - toggleCite: Toggles the cite node on or off. typescript editor.commands.toggleCite({ class: 'citation' }); - unsetCite: Removes the cite node. typescript editor.commands.unsetCite(); Configuration Default Configuration The Cite extension comes with sensible defaults that are suitable for most use cases. Here’s a breakdown of its configuration: - Name: cite - Group: inline - Content: inline (Allows text and inline elements inside the cite.) - Parse HTML: Recognizes <cite> tags when parsing HTML input. - Render HTML: Outputs <cite> tags with any additional HTML attributes. Example Usage typescript import { Cite } from '@fusion/extension-cite'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Cite.configure({ HTMLAttributes: { class: 'citation' } }), / other extensions / ], }); HTML Output html <cite class=\"citation\">Example Citation</cite> ",
    "url": "/extension-cite"
  },
  {
    "id": "extension-clear-format",
    "title": "README",
    "content": " ClearFormat Extension for Fusion Editor - @fusion/extension-clear-format Overview The ClearFormat extension provides a unified command for removing all text formatting and optionally clearing HTML node attributes in the Fusion Editor. This includes removing all marks (e.g., bold, italic), block formatting (e.g., headings, lists), and optionally cleaning node attributes such as style, class, and data-. Features Clear All Marks and Nodes: Removes inline formatting (marks) and block-level structure (nodes). Optional Attribute Cleaning: Can be configured to remove unwanted node attributes like style, class, or data-. Non-breaking Space Normalization: Includes a helper command to replace non-breaking spaces (&nbsp;) with regular spaces. Developer Configurable: Developers can customize which attributes to strip from nodes. Configuration Default Configuration Name: clearFormat Group: utility Default Behavior: Only clears formatting (clearNodes() + unsetAllMarks()); does not remove any node attributes unless configured. Available Options | Option | Type | Default | Description | | ---------------------- | ---------- | ----------- | ----------------------------------------------------- | | attributesToRemove | string[] | undefined | List of node attributes to remove (e.g., ['style']) | | removeDataAttributes | boolean | false | Whether to remove all data- attributes from nodes | Commands clearFormat: Removes all marks and block-level node formatting. Optionally removes node attributes if configured. clearNonBreakingSpace: Replaces non-breaking spaces (\\u00A0) with regular spaces (' ') in the selected range. Example ts import { ClearFormat } from '@fusion/extension-clear-format'; // Register the extension with optional configuration const editor = new Editor({ extensions: [ ClearFormat.configure({ attributesToRemove: ['style', 'class'], removeDataAttributes: true, }), // other extensions... ], }); // Usage editor.commands.clearFormat(); editor.commands.clearNonBreakingSpace(); HTML Output html <!-- Before --> <p style=\"color:red\" class=\"note\">Some <strong>formatted</strong> text&nbsp;here.</p> <!-- After clearFormat --> <p>Some formatted text here.</p> ",
    "url": "/extension-clear-format"
  },
  {
    "id": "extension-clipboard",
    "title": "README",
    "content": " Clipboard Extension - @fusion/extension-clipboard The Clipboard extension adds support for enhanced clipboard operations in your Fusion Editor, including copy, cut, and paste. When no text is selected, the extension copies or cuts the entire parent block node (e.g., paragraph, heading, image, etc.), improving editing efficiency. Overview This extension enhances the native clipboard behavior by allowing copy and cut of the entire block if no selection is made. It also supports pasting plain text from the system clipboard using the Clipboard API. Features - Copies the selected text or the full block if no selection is made. - Cuts the selected text or the full block if no selection is made. - Pastes plain text from the clipboard at the current cursor position. - Fully supports keyboard shortcuts: Ctrl/Cmd+C, Ctrl/Cmd+X, and Ctrl/Cmd+V. Commands | Command | Parameters | Description | | --------- | ---------- | --------------------------------------------------------------------- | | copy() | – | Copies selected content, or the entire block if no selection is made. | | cut() | – | Cuts selected content, or the entire block if no selection is made. | | paste() | – | Pastes content from the clipboard at the current cursor position. | Example Command Usage typescript editor.commands.copy(); editor.commands.cut(); editor.commands.paste(); Installation - To use the Clipboard extension, import and include it in your Tiptap editor setup: import { Clipboard } from '@fusion/extension-clipboard'; Usage - Add the extension to the editor configuration: typescript import { Editor } from '@tiptap/core'; import { Clipboard } from '@fusion/extension-clipboard'; const editor = new Editor({ extensions: [ Clipboard, // ...other extensions ], }); Keyboard Shortcuts | Shortcut | Action | | -------------- | ------ | | Ctrl/Cmd + C | Copy | | Ctrl/Cmd + X | Cut | | Ctrl/Cmd + V | Paste | ",
    "url": "/extension-clipboard"
  },
  {
    "id": "extension-code",
    "title": "README",
    "content": " Code Extension for Fusion Editor - @fusion/extension-code Overview The Code extension enables the use of inline <code> elements in Fusion Editor. This extension is particularly useful for representing code snippets or any text that should be displayed in a monospaced font without interpretation by the browser as HTML. Features - Inline Code Support: Allows you to wrap text in <code> tags to display inline code snippets. - Preservation of HTML Entities: Ensures that HTML entities within the code snippet are not parsed as HTML. - Customizable HTML Attributes: Provides the ability to add custom attributes to the <code> element. Technical Summary Content Categories - Phrasing content: The code element is part of the phrasing content category and can be used where phrasing content is expected. - Flow content: The code element can also be used within flow content, but only where phrasing content is allowed. - Palpable content: The code element is perceivable by the user and contributes to the document's meaning. Attributes - Global attributes: The code element supports all global attributes. - No Additional Attributes: The code element itself does not have any specific attributes beyond the global ones. Commands - setCode: Wraps the selected text in a <code> element or inserts a new one at the cursor. typescript editor.commands.setCode(); - toggleCode: Toggles the <code> element on or off. typescript editor.commands.toggleCode(); - unsetCode: Removes the <code> element. typescript editor.commands.unsetCode(); Keyboard Shortcuts - Mod-e: Toggles the code element. Customization (Optional) typescript Code.configure({ HTMLAttributes: { class: 'inline-code' }, }); Configuration Default Configuration The Code extension comes pre-configured with default options that are suitable for most use cases. Below is a summary of its configuration: - Name: code - Group: inline - Content: Inline code can only contain text and does not allow nested inline elements. - Parse HTML: The extension identifies <code> tags during the HTML parsing process. - Render HTML: Outputs a <code> element with any specified HTML attributes. Example Usage typescript import { Code } from '@fusion/extension-code'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Code.configure({ HTMLAttributes: { class: 'inline-code' } }), / other extensions / ], }); HTML Output html <code class=\"inline-code\">exampleCode()</code> ",
    "url": "/extension-code"
  },
  {
    "id": "extension-code-block",
    "title": "README",
    "content": " Code Block Extension for Fusion Editor - @fusion/extension-code-block Overview The CodeBlock extension allows you to create and manage code blocks within the Fusion Editor. This extension is ideal for displaying code snippets with syntax highlighting and supports multiple programming languages. Features - Block Node: Renders the <pre><code> block-level element for displaying code. - Language Support: Supports specifying the programming language for syntax highlighting. - Keyboard Shortcuts: Easily toggle code blocks using keyboard shortcuts. - Input Rules: Automatically create code blocks using backticks () or tildes (). - Triple Enter Exit: Allows exiting the code block with triple Enter key press. - Arrow Down Exit: Exits the code block when pressing Arrow Down at the end of the block. - VS Code Paste Integration: Automatically detects language from code pasted from VS Code. Attributes - language: Specifies the programming language for syntax highlighting. If no language is provided, the default language or no language will be used. - HTML Attributes: Customize the HTML attributes of the <pre><code> element using the HTMLAttributes option. Commands - setCodeBlock: Inserts a code block with optional language attribute. typescript editor.commands.setCodeBlock({ language: 'javascript' }); - toggleCodeBlock: Toggles the code block on or off. typescript editor.commands.toggleCodeBlock({ language: 'javascript' }); Configuration Default Configuration - Name: codeBlock - Block: The extension is applied as a block node. - Code: The node is treated as a code block. - Parse HTML: Recognizes <pre><code> tags when parsing HTML input. - Render HTML: Outputs <pre><code> tags with any additional HTML attributes. - Default Language: No default language is set unless specified. - Exit on Triple Enter: Allows exiting the code block with a triple Enter key press. - Exit on Arrow Down: Exits the code block when pressing Arrow Down at the end of the block. Keyboard Shortcuts - Mod-Alt-c: Toggles the code block on or off. Input Rules - Backtick Input Rule: Automatically creates a code block when typing followed by a space or newline. - Tilde Input Rule: Automatically creates a code block when typing followed by a space or newline. VS Code Paste Integration - Automatic Language Detection: Detects the language when pasting code from VS Code and applies the appropriate language class. Usage Example typescript import { CodeBlock } from '@fusion/extension-code-block'; // Add the extension to your editor setup const editor = new Editor({ extensions: [CodeBlock, / other extensions /], }); HTML Output Example html <pre><code class=\"language-javascript\">console.log('Hello, world!');</code></pre> ",
    "url": "/extension-code-block"
  },
  {
    "id": "extension-code-block-lowlight",
    "title": "README",
    "content": " CodeBlockLowlight Extension for Fusion Editor - @fusion/extension-code-block-lowlight Overview The CodeBlockLowlight extension enhances the basic CodeBlock extension by adding syntax highlighting using the Lowlight library. This extension is useful for displaying code snippets with syntax highlighting in the Fusion Editor. Features - Syntax Highlighting: Automatically highlights code blocks using Lowlight. - Customizable Language Support: Supports a wide range of programming languages through Lowlight. - Command Integration: Provides commands to set and toggle code blocks with optional language-specific highlighting. - Keyboard Shortcuts: Easily create and toggle code blocks using keyboard shortcuts. - Input Rules: Automatically create code blocks when typing specific markdown-like syntax. Attributes - HTML Attributes: Customize the HTML attributes of the <pre> element using the HTMLAttributes option. - Language: Specify the language for syntax highlighting. Commands - setCodeBlock: Applies a code block to the selected text with optional language highlighting. typescript editor.commands.setCodeBlock({ language: 'javascript' }); - toggleCodeBlock: Toggles the code block on or off, with optional language highlighting. typescript editor.commands.toggleCodeBlock({ language: 'javascript' }); Configuration Default Configuration - Name: codeBlockLowlight - Lowlight Instance: Pass your configured Lowlight instance to the extension. - Language Class Prefix: The prefix added to language classes (default: language-). - Exit on Triple Enter: Exits the code block when pressing Enter three times. - Exit on Arrow Down: Exits the code block when pressing Arrow Down at the end of the block. - Default Language: The default language for code blocks (optional). Keyboard Shortcuts - Mod-Alt-c: Toggles the code block on or off. Input Rules - Backtick Input Rule: Automatically creates a code block when typing followed by a space or newline. - Tilde Input Rule: Automatically creates a code block when typing followed by a space or newline. Usage Example typescript import { CodeBlockLowlight } from '@fusion/extension-code-block-lowlight'; import lowlight from 'lowlight/lib/core'; import javascript from 'highlight.js/lib/languages/javascript'; lowlight.registerLanguage('javascript', javascript); const editor = new Editor({ extensions: [ CodeBlockLowlight.configure({ lowlight, defaultLanguage: 'javascript', }), // other extensions... ], }); HTML Output Example html <pre><code class=\"language-javascript\">console.log('Hello, world!');</code></pre> ",
    "url": "/extension-code-block-lowlight"
  },
  {
    "id": "extension-code-block-prism",
    "title": "README",
    "content": " CodeBlockPrism Extension for Fusion Editor - @fusion/extension-code-block-prism Overview The CodeBlockPrism extension allows you to highlight code blocks using the Prism syntax highlighter via the Refractor library. This extension is ideal for developers who need advanced syntax highlighting capabilities within the Fusion Editor. Features - Syntax Highlighting: Highlights code blocks with support for a wide range of programming languages using Prism. - Customization: Leverage the Refractor instance for custom language support and syntax highlighting customization. - ProseMirror Integration: Fully integrated with the ProseMirror editor, allowing for seamless syntax highlighting in your code blocks. Commands - setCodeBlock: Applies a code block to the selected text with optional language support. typescript editor.commands.setCodeBlock({ language: 'javascript' }); - toggleCodeBlock: Toggles the code block on or off with optional language support. typescript editor.commands.toggleCodeBlock({ language: 'javascript' }); Configuration Default Configuration - Name: codeBlockPrism - Language Class Prefix: language- (applies language-specific classes to code blocks) - Default Language: None (set a default language if required) - HTML Attributes: Custom HTML attributes can be added to the <pre> tag. - Refractor Instance: Pass a Refractor instance to support custom language configurations. Keyboard Shortcuts - Mod-Alt-c: Toggles the code block on or off. Input Rules - Backtick Input Rule: Automatically creates a code block when typing followed by a space or newline. - Tilde Input Rule: Automatically creates a code block when typing followed by a space or newline. Usage Example typescript import { CodeBlockPrism } from '@fusion/extension-code-block-prism'; import { refractor } from 'refractor'; import javascript from 'refractor/lang/javascript'; refractor.register(javascript); const editor = new Editor({ extensions: [ CodeBlockPrism.configure({ refractor, defaultLanguage: 'javascript', }), // other extensions ], }); HTML Output Example html <pre class=\"language-javascript\"> <code class=\"language-javascript\"> console.log('Hello, world!'); </code> </pre> ",
    "url": "/extension-code-block-prism"
  },
  {
    "id": "extension-data",
    "title": "README",
    "content": " Data Extension for Fusion Editor - @fusion/extension-data Overview The Data extension enables support for the <data> HTML element within the Fusion Editor. This element is designed to link visible content with machine-readable data, making it useful for scenarios where structured data needs to be embedded within text content. Features - Inline Element: The <data> element is treated as an inline element, allowing it to be embedded seamlessly within text. - Customizable Attributes: You can set and customize attributes such as value to store machine-readable data. - Commands: - setData: Inserts a new <data> element with specified attributes. - unsetData: Removes the <data> element and converts it to plain text. Commands - setData: Inserts a <data> element with the specified attributes. typescript editor.commands.setData({ value: 'machine-readable-value', 'data-custom': 'custom-attribute', }); - unsetData: Removes the <data> element, converting it back to plain text. typescript editor.commands.unsetData(); Example Usage typescript import { Data } from './path/to/your/data-extension'; const editor = new Editor({ extensions: [ Data, // other extensions ], }); HTML Output html <data value=\"12345\" data-info=\"example-data\">Visible Content</data> ",
    "url": "/extension-data"
  },
  {
    "id": "extension-data-list",
    "title": "README",
    "content": " Datalist Extension for Fusion Editor - @fusion/extension-data-list Overview The Datalist extension provides support for the <datalist> HTML element in the Fusion Editor. The <datalist> element is used to provide an \"autocomplete\" feature for <input> elements, enabling users to select from pre-defined options. Features - Block-Level Element: The <datalist> element is treated as a block-level element. - Supports Child Elements: Only <option> elements are allowed inside a <datalist>. - Customizable Attributes: You can set attributes like id to associate the <datalist> with an <input> element. - Commands: - setDatalist: Inserts a new <datalist> element with specified attributes. - toggleDatalist: Toggles the presence of a <datalist> element. - unsetDatalist: Removes the <datalist> element and converts it to a paragraph. Commands - setDatalist: Inserts a <datalist> element with optional attributes. typescript editor.commands.setDatalist({ id: 'example-datalist', // optional }); - toggleDatalist: Toggles the presence of a <datalist> element. typescript editor.commands.toggleDatalist({ id: 'example-datalist', }); - unsetDatalist: Removes the <datalist> element, converting it to a paragraph. typescript editor.commands.unsetDatalist(); Usage Example To install the extension, include it in your editor setup as shown below: typescript import { Datalist } from './path/to/your/datalist-extension'; const editor = new Editor({ extensions: [ Datalist, // other extensions ], }); HTML Output Example html <datalist id=\"ice-cream-flavors\"> <option value=\"Chocolate\"></option> <option value=\"Coconut\"></option> <option value=\"Mint\"></option> <option value=\"Strawberry\"></option> <option value=\"Vanilla\"></option> </datalist> ",
    "url": "/extension-data-list"
  },
  {
    "id": "extension-del",
    "title": "README",
    "content": " Del Extension for Fusion Editor - @fusion/extension-del Overview The Del extension allows you to add the <del> tag in the Fusion Editor. The <del> tag represents text that has been deleted from a document. Features - Block-level Node: Adds the <del> element for deleted content. - Command Integration: Provides a command to insert the <del> element with attributes. - Attributes: Supports common attributes such as datetime and cite. Attributes - datetime: Represents the date and time of the deletion. - cite: A URL providing the source for the deletion. Commands - insertDel: Inserts the <del> element with optional attributes like datetime and cite. Configuration Default Configuration - Name: del - Group: block - Content: Can contain inline elements. - Attributes: Supports datetime and cite attributes. Customization You can customize the Del extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Del } from '@fusion/extension-del'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Del, / other extensions /], }); HTML Output Example html <p>This text is <del datetime=\"2023-09-16\">deleted</del>.</p> ",
    "url": "/extension-del"
  },
  {
    "id": "extension-desc-list",
    "title": "README",
    "content": " <dl>, <dt>, and <dd> Extension Overview This extension provides support for creating and manipulating HTML description lists (<dl>), terms (<dt>), and descriptions (<dd>) in the Tiptap editor. A description list is typically used to define terms and their associated descriptions or values. Features - Support for <dl>, <dt>, and <dd> elements. - Ensures proper nesting of terms (<dt>) and descriptions (<dd>) within a description list (<dl>). Commands - Insert Description List (<dl>): Use the command setDl to add a new description list. - Insert Term (<dt>): Use the command setDt to add a new term inside a description list. - Insert Description (<dd>): Use the command setDd to add a new description associated with a term. typescript editor.commands.setDl(); editor.commands.setDt(); editor.commands.setDd(); Configuration typescript import { Cite } from '@fusion/extension-desc-list'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Dl, Dt, Dd, / other extensions / ], }); Usage Example typescript import { Dl, Dt, Dd } from './your-extension-path'; const editor = new Editor({ extensions: [ Dl, Dt, Dd, // other extensions ], }); Example HTML Output html <dl> <dt>HTML</dt> <dd>A markup language for creating web pages.</dd> <dt>CSS</dt> <dd>A style sheet language for designing web pages.</dd> </dl> ",
    "url": "/extension-desc-list"
  },
  {
    "id": "extension-details",
    "title": "README",
    "content": " Details and Summary Extension for Fusion Editor - @fusion/extension-details-summary Overview The Details and Summary extension provides support for the <details> and <summary> HTML elements in Fusion Editor. These elements are typically used together to create collapsible content blocks, where the <summary> defines the visible heading, and the <details> tag contains the content that can be toggled open or closed. Features - Toggleable Content Blocks: Allows creating expandable/collapsible sections. - Customizable HTML Attributes: Supports adding custom attributes like open for <details> and custom data- attributes for <summary>. - Structured Content: The <summary> is treated as the heading or title, and <details> can contain other block-level content. - Keyboard Shortcuts and Commands: Allows you to quickly insert or toggle <details> and <summary> elements. Configuration Default Configuration - Name: details, summary - Group: block - Content: - details contains a summary followed by other block-level content. - summary contains inline content, acting as a header for the details. - Attributes: - open (for <details>): Indicates whether the details are open or closed. - text (for <summary>): Defines the text of the summary element. - Custom attributes for both elements can be added. Commands - toggleDetails: Inserts or toggles a <details> block element. typescript editor.commands.toggleDetails({ open: true }); - insertDetails: Inserts a <details> block element with or without summary. typescript editor.commands.insertDetails({ open: true, withSummary: true }); - setSummary: Sets the <summary> element inside a <details> block with custom attributes typescript editor.commands.setSummary({ text: 'Summary Text' }); Usage typescript const editor = new Editor({ extensions: [ Details.configure({ HTMLAttributes: { class: 'details-class' }, }), Summary.configure({ HTMLAttributes: { class: 'summary-class' }, }), ], }); HTML Output html <details class=\"details-class\" open> <summary class=\"summary-class\" data-text=\"More Information\">More Information</summary> <p>Additional content is displayed here.</p> </details> Customization You can customize the Details and Summary extensions by configuring them with HTML attributes or other options. You can also combine them with other extensions in Fusion Editor to create rich, structured documents.",
    "url": "/extension-details"
  },
  {
    "id": "extension-dfn",
    "title": "README",
    "content": " Dfn Extension for Fusion Editor - @fusion/extension-dfn Overview The Dfn extension provides support for the <dfn> HTML element in Fusion Editor. The <dfn> (definition) element is used to denote a term that is being defined within the context of an article or a document. This extension enables the user to mark specific terms with <dfn> to signify definitions. Features - Definition Tag Support: Easily wrap important terms with the <dfn> tag to highlight their definitions. - Customizable HTML Attributes: Supports customization of attributes like title. - Inline Element: Acts as an inline element that can be inserted into paragraphs or other block-level elements. Configuration Default Configuration The Dfn extension offers flexibility with the following defaults: - Name: dfn - Group: inline - Content: text (Only text content is allowed inside <dfn>.) - HTML Attributes: {} (Custom HTML attributes for the <dfn> element.) Commands - setDfn: Wraps the selected content inside a <dfn> tag. typescript editor.commands.setDfn({ title: 'definition' }); Usage typescript const editor = new Editor({ extensions: [ Dfn.configure({ HTMLAttributes: { title: 'definition' }, }), ], }); HTML Output html <p> The <dfn><abbr title=\"Hubble Space Telescope\">HST</abbr></dfn> is among the most productive scientific instruments ever constructed. It has been in orbit for over 20 years, scanning the sky and returning data and photographs of unprecedented quality and detail. </p> ",
    "url": "/extension-dfn"
  },
  {
    "id": "extension-dialog",
    "title": "README",
    "content": " Dialog Extension for Fusion Editor - @fusion/extension-dialog Overview The Dialog extension provides support for the <dialog> HTML element in Fusion Editor. This extension allows you to create and manage modal dialogs, which are useful for interactive content such as forms or messages that require user interaction. Features - Modal Dialog Support: Easily create and manage <dialog> elements with customizable content. - Customizable HTML Attributes: Supports open and id attributes, with the ability to add custom attributes. - Draggable and Selectable: Dialog elements can be dragged and selected for easy manipulation. Configuration Default Configuration The Dialog extension is flexible with the following defaults: - Name: dialog - Group: block (Dialog elements are treated as block-level nodes.) - Content: block (Allows block-level content within dialogs.) - HTML Attributes: {} (Custom HTML attributes for the dialog.) - Defining: true (Indicates that the node is defining.) - Draggable: true (Dialog nodes are draggable.) Commands - insertDialog: Inserts a dialog element with specified attributes and content. typescript editor.commands.insertDialog({ attrs: { open: true, id: 'dialog-id' }, content: [{ type: 'paragraph', content: [{ type: 'text', text: 'This is a dialog' }] }] }); Usage typescript const editor = new Editor({ extensions: [ Dialog.configure({ HTMLAttributes: { open: true, id: 'example-dialog' }, }), ], }); HTML Output html <dialog open id=\"example-dialog\"> <p>This is a dialog</p> </dialog> ",
    "url": "/extension-dialog"
  },
  {
    "id": "extension-div",
    "title": "README",
    "content": " Div Extension for Fusion Editor - extension-div Overview The Div extension adds support for <div> elements in Fusion Editor. This extension allows you to create and manipulate <div> elements, which are commonly used for layout and grouping content in HTML. The extension is designed to be flexible, allowing for different content configurations based on your needs. Features - Block-Level Container: By default, the <div> element can contain block-level elements such as paragraphs, headings, lists, and more. - Content Flexibility: The extension can be configured to support either block-level or inline-level content. Configuration The Div extension can be customized using the content property. Here’s how you can configure it: content: 'block' (Current Setting) - Behavior: - The <div> acts as a block-level container, capable of holding other block-level elements. - Inline content (e.g., text) placed directly inside the <div> will be automatically wrapped in a paragraph (<p>), maintaining the block-level structure. - Usage: - Use this configuration when you want to ensure that the content inside the <div> maintains a block-level structure. - Ideal for grouping block-level elements like paragraphs and headings. content: 'inline' (Commented Out) - Behavior: - The <div> allows text and inline elements to be placed directly inside it without wrapping them in a paragraph. - This configuration is useful for specific layouts where you want to avoid additional block-level wrappers. - Usage: - Uncomment and use this setting if you need the <div> to act as a container for inline content without additional wrapping. - Note: This may result in less semantic HTML, as <div> is typically used for block-level content. Example Here’s an example of how the Div extension can be used: typescript import { Div } from './path/to/your/div-extension'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Div, / other extensions /], }); With content: 'block': html <div> <p>This is a paragraph inside a div.</p> <h2>This is a heading inside a div.</h2> </div> With content: 'inline': html <div> This is text directly inside the div. <span>Inline element inside the div.</span> </div> ",
    "url": "/extension-div"
  },
  {
    "id": "extension-document",
    "title": "README",
    "content": " Fusion Document extension - @fusion/extension-document The Document extension is a fundamental component of the Fusion Editor, defining the top-level node of your document. It serves as the root container for all other nodes within the editor. Overview The Document extension is essential for structuring the editor's content. It is analogous to the <body> tag in an HTML document, acting as the primary container for all other nodes. The Document node is configured to be a top-level node and can contain multiple block-level nodes. Spec - Top-Level Node: This extension is set as the top node (topNode: true), meaning it serves as the root of the document. - Content: The Document node can contain one or more block-level nodes (block+). Example typescript import { Editor } from '@fusion/core' import { Document } from '@fusion/extension-document' import { Paragraph } from '@fusion/extension-paragraph' import { Text } from '@fusion/extension-text' const editor = new Editor({ extensions: [ Document, Paragraph, Text, // other extensions ], }) The Document extension is a crucial part of the Fusion Editor, providing the root structure for your content. By including it in your editor setup, you enable the editor to manage and render multiple block-level elements effectively. ",
    "url": "/extension-document"
  },
  {
    "id": "extension-dropcursor",
    "title": "README",
    "content": " Dropcursor Extension - @fusion/extension-dropcursor The Dropcursor extension adds a drop cursor to your editor, which is a visual indicator line that appears between nodes when dragging and dropping content. This feature enhances the drag-and-drop experience by clearly showing where content will be placed. Overview This extension integrates ProseMirror's dropCursor plugin into the Tiptap editor, allowing customization of the cursor’s color, width, and additional styling through a custom class. Features - Displays a drop cursor line while dragging content. - Customizable color, width, and CSS class for styling. Options | Option | Type | Default | Description | |-------------|---------------------|----------------|--------------------------------------------------------------------| | color | string | 'currentColor' | Sets the color of the drop cursor line. Accepts any valid CSS color value. | | width | number | 1 | Sets the width of the drop cursor line in pixels. | | class | string | undefined | Adds a custom CSS class to the drop cursor, allowing additional styling. | Installation To use the Dropcursor extension, import it into your editor configuration: typescript import { Dropcursor } from 'path/to/dropcursor-extension'; Usage - Add the Dropcursor extension to the editor’s extensions: typescript import { Dropcursor } from 'path/to/dropcursor-extension'; const editor = new Editor({ extensions: [ Dropcursor.configure({ color: 'red', // Set custom color width: 2, // Set custom width class: 'drop-cursor', // Add custom CSS class }), // other extensions ], }); Example CSS for Drop Cursor - To style the drop cursor with a custom class, you can add the following CSS: css / Custom styling for the drop cursor / .drop-cursor { background-color: rgba(255, 0, 0, 0.5); / semi-transparent red / border-radius: 2px; } ",
    "url": "/extension-dropcursor"
  },
  {
    "id": "extension-embed",
    "title": "README",
    "content": " Embed Extension for Fusion Editor - @fusion/extension-embed Overview The Embed extension allows users to insert and manage <embed> elements in the Fusion Editor. The <embed> element is used to embed external resources such as multimedia (e.g., audio, video) and plugins (e.g., PDFs) in the document. Features - Customizable HTML Attributes: Supports attributes like src, type, width, and height for the embed element. - Block-level Node: Treats the embed element as a block-level content, allowing it to be part of the document flow. - Draggable and Selectable: Supports dragging and selecting the embed element within the editor. Configuration Default Configuration The Embed extension can be configured with the following defaults: - Name: embed - Group: block (The embed element is treated as a block-level element.) - Attributes: - src: The URL of the embedded resource (default: null). - type: The MIME type of the embedded content (default: null). - width: The width of the embedded content (default: '600'). - height: The height of the embedded content (default: '400'). Commands - insertEmbed: Inserts an embed element at the current selection with the provided attributes. typescript editor.commands.insertEmbed({ src: 'https://example.com/sample.mp4', type: 'video/mp4', width: '800', height: '600', }); Usage typescript const editor = new Editor({ extensions: [ Embed.configure({ HTMLAttributes: { class: 'embed-responsive', }, }), ], }); HTML Output html <embed src=\"https://example.com/sample.mp4\" type=\"video/mp4\" width=\"800\" height=\"600\" /> ",
    "url": "/extension-embed"
  },
  {
    "id": "extension-emoji",
    "title": "README",
    "content": " extension-emoji This library was generated with [Nx](https://nx.dev). Running unit tests Run nx test extension-emoji to execute the unit tests. ",
    "url": "/extension-emoji"
  },
  {
    "id": "extension-fieldset",
    "title": "LEGENT_README",
    "content": " Legend Extension for Fusion Editor - @fusion/extension-legend Overview The Legend extension allows you to insert <legend> elements within the Fusion Editor. The <legend> tag defines a caption for the <fieldset> element, providing descriptive text for the grouped form controls. Features - Block Node: Renders the <legend> tag as a block-level node. - Command Integration: Provides a command to insert the <legend> element with optional attributes like id and class. - HTML Attributes: Supports standard HTML attributes to customize the <legend> element. Attributes - class: Adds custom classes to the <legend> element. - id: Assigns an ID to the <legend> element for identification. Commands - insertLegend: Inserts a <legend> element with the specified attributes and content. Configuration Default Configuration - Name: legend - Block: The extension is applied as a block-level node. - Parse HTML: Recognizes the <legend> tag and its attributes when parsing HTML input. - Render HTML: Outputs a <legend> tag with the provided attributes and content. Customization You can customize the Legend extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Legend } from '@fusion/extension-legend'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Legend, / other extensions /], }); HTML Output Example html <fieldset> <legend id=\"legend1\" class=\"legend-class\">Personal Information</legend> <input type=\"text\" name=\"name\" placeholder=\"Name\"> </fieldset> ",
    "url": "/extension-fieldset"
  },
  {
    "id": "extension-fieldset",
    "title": "README",
    "content": " Fieldset Extension for Fusion Editor - @fusion/extension-fieldset Overview The Fieldset extension allows you to insert <fieldset> elements within the Fusion Editor. The <fieldset> tag is used to group related elements in a form, providing a clear structure for form elements. Features - Block Node: Renders the <fieldset> tag as a block-level node. - Command Integration: Provides a command to insert the <fieldset> element with optional attributes like id, class, disabled, form, and name. - HTML Attributes: Supports standard HTML attributes to customize the <fieldset> element. Attributes - disabled: Specifies whether the <fieldset> is disabled, making all its elements unmodifiable. - form: Associates the <fieldset> with a specific form. - name: Assigns a name to the <fieldset>. - class: Adds custom classes to the <fieldset> element. - id: Assigns an ID to the <fieldset> element for identification. Commands - insertFieldset: Inserts a <fieldset> element with the specified attributes and content. Configuration Default Configuration - Name: fieldset - Block: The extension is applied as a block-level node. - Parse HTML: Recognizes the <fieldset> tag and its attributes when parsing HTML input. - Render HTML: Outputs a <fieldset> tag with the provided attributes and content. Customization You can customize the Fieldset extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Fieldset } from '@fusion/extension-fieldset'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Fieldset, / other extensions /], }); HTML Output Example html <fieldset id=\"fieldset1\" class=\"form-group\" disabled> <legend>Personal Information</legend> <input type=\"text\" name=\"name\" placeholder=\"Name\"> </fieldset> ",
    "url": "/extension-fieldset"
  },
  {
    "id": "extension-figure",
    "title": "README",
    "content": " <figure> and <figcaption> Extension Overview This extension allows you to add <figure> and <figcaption> elements to your editor. These are typically used to display media (such as images) with an associated caption. - <figure>: Used to group media content. - <figcaption>: Provides a caption for the content inside the <figure>. Features - Nest media and other content inside <figure>. - Automatically associate a <figcaption> with its parent <figure>. - Ensure accessibility by using the first <figcaption> as the figure's accessible name. Attributes <figure> attributes: - class: Adds a CSS class to the figure. - id: Adds an ID to the figure. <figcaption> attributes: - class: Adds a CSS class to the figcaption. - id: Adds an ID to the figcaption. Commands Insert Figure typescript editor.commands.insertFigure({ class: 'my-figure', id: 'figure-1' }); Insert Figcaption typescript editor.commands.insertFigcaption({ class: 'my-caption', id: 'caption-1' }); Usage Example typescript const editor = new Editor({ extensions: [ Figure, Figcaption ], }); editor.chain().focus().insertFigure({ class: 'custom-figure' }).run(); HTML Output Example html <figure class=\"custom-figure\"> <figcaption>Caption here</figcaption> <img src=\"example.jpg\" alt=\"Example Image\"> </figure> Key Notes: - The <figure> element groups together media content. - The <figcaption> must be the first or last child inside the <figure>. - For accessibility, the first <figcaption> is treated as the figure’s caption. ",
    "url": "/extension-figure"
  },
  {
    "id": "extension-find-and-replace",
    "title": "README",
    "content": " FindAndReplace The FindAndReplace extension for [Tiptap](https://tiptap.dev) enables advanced search and replace functionality. It provides commands to highlight, navigate, and replace occurrences of a search term, with support for case sensitivity and optional regex disabling. Overview This extension allows you to: - Search text in the editor using a plain string or regex. - Highlight all search results in the document. - Navigate between search results. - Replace a single result or all matches at once. - Customize styles for highlighted and active results. Features - Inline decorations for all matches - Scroll-to-view for the active match - Commands for search, replace, navigation - Optional case sensitivity and regex disabling - Configurable highlight classes Options | Name | Type | Default | Description | | -------------------------- | ------------ | ------------------------- | --------------------------------------------------------- | | searchTerm | string | \"\" | The current term to search for. | | replaceTerm | string | \"\" | The current replacement term. | | results | Result[] | [] | Internal storage of match positions. | | currentIndex | number | 0 | The currently selected match index. | | searchResultClass | string | \"search-result\" | CSS class applied to all matches. | | searchResultCurrentClass | string | \"search-result-current\" | CSS class applied to the active match. | | caseSensitive | boolean | false | Whether the search is case-sensitive. | | disableRegex | boolean | true | Whether regex is disabled (true means plain text search). | | onChange | () => void | () => {} | Optional callback when search state changes. | Commands setSearchTerm(searchTerm: string, caseSensitive: boolean) Set the search term and case sensitivity. Triggers a re-scan of the document. setReplaceTerm(replaceTerm: string) Set the term to use during replacement operations. replace() Replace the currently highlighted search result with the replace term. replaceAll() Replace all matched results with the replace term. goToPrevSearchResult() Navigate to the previous result in the match list. goToNextSearchResult() Navigate to the next result in the match list. Usage Example ts import { Editor } from '@tiptap/core' import StarterKit from '@tiptap/starter-kit' import { FindAndReplace } from './FindAndReplace' // path to your extension const editor = new Editor({ extensions: [ StarterKit, FindAndReplace.configure({ searchResultClass: 'my-highlight', searchResultCurrentClass: 'my-current', caseSensitive: false, disableRegex: true, }), ], }) // Set search and replace terms editor.commands.findAndReplace.setSearchTerm('example', false) editor.commands.findAndReplace.setReplaceTerm('demo') // Replace current or all editor.commands.findAndReplace.replace() editor.commands.findAndReplace.replaceAll() // Navigate results editor.commands.findAndReplace.goToNextSearchResult() editor.commands.findAndReplace.goToPrevSearchResult() Styling Example css .search-result { background-color: yellow; color: black; } .search-result-current { background-color: orange; border: 1px solid red; } HTML Output The extension uses decorations only and does not affect the underlying HTML content. All search highlights are purely visual and do not alter the document’s structure or saved content. ",
    "url": "/extension-find-and-replace"
  },
  {
    "id": "extension-floating-menu",
    "title": "README",
    "content": " extension-floating-menu This library was generated with [Nx](https://nx.dev). Running unit tests Run nx test extension-floating-menu to execute the unit tests. ",
    "url": "/extension-floating-menu"
  },
  {
    "id": "extension-focus",
    "title": "README",
    "content": " Focus Extension - @fusion/extension-focus The Focus extension adds a CSS class to nodes in the editor that are currently focused, with customizable depth options. This extension is useful for highlighting specific content when it is selected or in focus. Overview This extension allows you to control the focus effect within your editor by applying a custom class to focused nodes. You can specify the focus mode to define which nodes get the class based on their depth. Features - Adds a focus class to selected nodes in the editor. - Supports focus modes: - All: Adds the focus class to all matching nodes. - Deepest: Adds the focus class only to the deepest nested node. - Shallowest: Adds the focus class only to the shallowest nested node. Options | Option | Type | Default | Description | |--------------|------------------------|---------------|-------------| | className | string | 'has-focus' | CSS class name applied to focused nodes. | | mode | 'all' \\| 'deepest' \\| 'shallowest' | 'all' | Determines the depth at which the focus class is applied. | Installation To use the Focus extension, import it into your editor configuration: typescript import { Focus } from 'path/to/focus-extension'; Usage - Add the Focus extension to the editor’s extensions with your preferred options: typescript import { Focus } from 'path/to/focus-extension'; const editor = new Editor({ extensions: [ Focus.configure({ className: 'is-focused', // Custom focus class mode: 'deepest', // Focus mode: 'all', 'deepest', or 'shallowest' }), // other extensions ], }); Example CSS for Focused Nodes - Add styling to the focus class using CSS to customize the appearance of focused nodes: css / Refined Focus Styles / .has-focus { position: relative; padding: 5px; border-radius: 5px; outline: none; transition: box-shadow 0.2s ease-in-out, transform 0.15s ease-in-out; box-shadow: 0 0 0 1px var(--purple), 0 0 6px rgba(128, 0, 128, 0.3); } body:not(.dark) .has-focus { box-shadow: 0 0 0 1px var(--purple), 0 0 8px var(--focus-glow-light); } body.dark .has-focus { box-shadow: 0 0 0 1px var(--purple), 0 0 8px var(--focus-glow-dark); } .has-focus:active { transform: scale(0.98); } ",
    "url": "/extension-focus"
  },
  {
    "id": "extension-font",
    "title": "README",
    "content": " Case Extension - @fusion/extension-case The Case extension adds text case transformation capabilities to your editor, allowing users to change the case of selected text with five different transformation options. This extension provides functionality similar to Microsoft Word's case transformation features. Overview This extension enables case transformations on selected text within the editor. It supports five different case modes that can be applied through editor commands. The transformations preserve all text formatting and document structure while maintaining the original selection after transformation. Features - Sentence Case: Capitalizes the first letter of each sentence - Lowercase: Converts all text to lowercase - Uppercase: Converts all text to uppercase - Capitalize Each Word: Capitalizes the first letter of every word - Toggle Case: Inverts the case of each character - Preserves text formatting (bold, italic, etc.) - Maintains original selection after transformation - Full TypeScript support with strict typing Commands | Command | Parameters | Description | | --------- | ----------------- | ----------- | | setCase | type: 'sentence' | 'lower' | 'upper' | 'capitalize' | 'toggle' | Applies the specified case transformation to selected text | Installation To use the Case extension, import it into your editor configuration: typescript import { FontCase } from '@fusion/extension-font'; Usage Basic Setup Add the Case extension to your editor's extensions: typescript import { Editor } from '@tiptap/core'; import StarterKit from '@tiptap/starter-kit'; import { FontCase } from '@fusion/extension-font'; const editor = new Editor({ extensions: [ StarterKit, FontCase, // other extensions ], }); Applying Case Transformations Use the setCase command to transform selected text: typescript // Apply sentence case to selected text editor.commands.setCase('sentence'); // Convert selection to lowercase editor.commands.setCase('lower'); // Convert selection to uppercase editor.commands.setCase('upper'); // Capitalize each word in selection editor.commands.setCase('capitalize'); // Toggle case of each character editor.commands.setCase('toggle'); UI Implementation Example Create toolbar buttons to trigger case transformations: typescript <div class=\"toolbar\"> <button onclick=\"editor.commands.setCase('sentence')\">Sentence Case</button> <button onclick=\"editor.commands.setCase('lower')\">lowercase</button> <button onclick=\"editor.commands.setCase('upper')\">UPPERCASE</button> <button onclick=\"editor.commands.setCase('capitalize')\">Title Case</button> <button onclick=\"editor.commands.setCase('toggle')\">tOGGLE cASE</button> </div> Transformation Details - Sentence Case: Capitalizes first letter after sentence-ending punctuation (., !, ?) - Capitalize Each Word: Capitalizes first letter of words using word boundaries - Toggle Case: Inverts case only for alphabetic characters All transformations preserve non-alphabetic characters and formatting Only modifies selected text (does nothing if no text is selected) ",
    "url": "/extension-font"
  },
  {
    "id": "extension-footer",
    "title": "README",
    "content": " Footer Extension for Fusion Editor - @fusion/extension-footer Overview The Footer extension allows users to insert and manage <footer> elements in the Fusion Editor. A footer is typically used to contain metadata or navigational links at the bottom of a document or section. Features - Customizable HTML Attributes: Supports customization of HTML attributes for the <footer> tag. - Block Content: Allows block-level content such as paragraphs, navigation links, and other metadata. - Defining Node: Marks the footer as a defining node, making it a key structural element in the document. Configuration Default Configuration The Footer extension is customizable with the following default options: - Name: footer - Group: block (The footer is treated as a block-level element.) - Content: block (Allows block-level elements such as paragraphs and links.) - HTML Attributes: {} (Custom HTML attributes can be added to the footer.) - Defining: true (Marks the footer as a defining node.) Commands - insertFooter: Inserts a footer element at the current selection. typescript editor.commands.insertFooter(); Usage typescript const editor = new Editor({ extensions: [ Footer.configure({ HTMLAttributes: { class: 'page-footer', role: 'contentinfo', }, }), ], }); HTML Output html <footer class=\"page-footer\" role=\"contentinfo\"> <!-- Block-level content goes here --> </footer> ",
    "url": "/extension-footer"
  },
  {
    "id": "extension-form",
    "title": "README",
    "content": " Form Extension for Fusion Editor - @fusion/extension-form Overview The Form extension allows users to insert and manage <form> elements in the Fusion Editor. Forms are crucial components of web development, enabling the collection of user input. Features - Customizable HTML Attributes: Supports customization of HTML attributes for the form tag. - Block Content: Allows block-level content, such as inputs, buttons, and other form controls, to be included within the form. - Defining Node: Treats the form element as a defining node, making it a key structural element within the document. Configuration Default Configuration The Form extension is customizable with the following default options: - Name: form - Group: block (Forms are treated as block-level elements.) - Content: block (Allows block-level elements such as inputs and buttons.) - HTML Attributes: {} (Custom HTML attributes can be added to the form element.) - Defining: true (Marks the form as a defining node.) Commands - insertForm: Inserts a form element at the current selection. typescript editor.commands.insertForm(); Usage typescript const editor = new Editor({ extensions: [ Form.configure({ HTMLAttributes: { action: '/submit', method: 'post', }, }), ], }); HTML Output html <form action=\"/submit\" method=\"post\"> <!-- Block-level content goes here --> </form> ",
    "url": "/extension-form"
  },
  {
    "id": "extension-format-painter",
    "title": "README",
    "content": " extension-format-painter This library was generated with [Nx](https://nx.dev). Running unit tests Run nx test extension-format-painter to execute the unit tests. ",
    "url": "/extension-format-painter"
  },
  {
    "id": "extension-gapcursor",
    "title": "README",
    "content": " Gapcursor Extension - @fusion/extension-gapcursor The Gapcursor extension enables a gap cursor feature within the editor, allowing a cursor to appear in places where there is no content, such as between nodes. This extension adds flexibility in navigating empty spaces within the document. Overview This extension integrates the ProseMirror gap cursor into a Tiptap editor. A gap cursor is a visual indicator that appears between nodes when there is no content, allowing users to select, insert, or interact with otherwise inaccessible areas. Features - Displays a gap cursor at empty areas between nodes, improving navigation. - Customizable with CSS to fit light and dark themes. Node Configuration In the Tiptap configuration, you can specify whether the gap cursor is allowed at certain positions using the allowGapCursor setting. This setting supports: - true: Always show the gap cursor. - false: Disable the gap cursor. - A function that returns a boolean, providing conditional control over where the gap cursor appears. Installation To install, import the Gapcursor extension: typescript import { Gapcursor } from 'path/to/gapcursor-extension'; Usage - Include the Gapcursor extension in your editor's extensions: typescript import { Gapcursor } from 'path/to/gapcursor-extension'; const editor = new Editor({ extensions: [ Gapcursor, // other extensions ], }); Configuration Options typescript Gapcursor.configure({ allowGapCursor: (context) => { return context.name !== 'image'; // Allow gap cursor except near image nodes }, }); Or // Each extension has to allowGapCursor: true Styling css / Base styling for the ProseMirror gap cursor / .ProseMirror-gapcursor { display: none; pointer-events: none; position: absolute; width: 2px; background-color: rgba(0, 0, 0, 0.5); margin: 0; animation: ProseMirror-cursor-blink 1s steps(2, start) infinite; } .ProseMirror-focused .ProseMirror-gapcursor { display: block; } .ProseMirror .ProseMirror-gapcursor { margin-left: auto; margin-right: auto; width: 1px; max-width: 40rem; height: 1.2em; } .ProseMirror-gapcursor:after { content: \"\"; display: block; position: absolute; top: -2px; width: 18px; border-top: 1px solid rgba(0, 0, 0, 0.4); margin: 0 auto; animation: ProseMirror-cursor-blink 1s steps(2, start) infinite; } :is(.dark .ProseMirror-gapcursor) { background-color: rgba(255, 255, 255, 0.6); } :is(.dark .ProseMirror-gapcursor):after { border-top-color: rgba(255, 255, 255, 0.4); } @keyframes ProseMirror-cursor-blink { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } } ",
    "url": "/extension-gapcursor"
  },
  {
    "id": "extension-header",
    "title": "README",
    "content": " Header Extension for Fusion Editor - @fusion/extension-header Overview The Header extension provides support for the <header> element in Fusion Editor. This extension allows users to insert and manage header elements, which are typically used to introduce or group sections of a page or document. Features - Block-Level Element: Inserts a <header> element, which can contain other block-level content. - Customizable HTML Attributes: Allows customization of HTML attributes for the <header> tag. - Draggable: Supports dragging the header block within the document. - Defining Node: The header defines its own content, separating it from other blocks. Configuration Default Configuration The Header extension provides customizable options with sensible defaults: - Name: header - Group: block (Headers are treated as block-level elements.) - Content: block (Can contain other block-level content.) - HTML Attributes: {} (Custom HTML attributes can be added.) - Defining: true (Indicates that the node defines its own structure.) Commands - insertHeader: Inserts a new header block. typescript editor.commands.insertHeader(); Usage typescript import { Header } from '@fusion/extension-header'; const editor = new Editor({ extensions: [ Header.configure({ HTMLAttributes: { class: 'custom-header-class', }, }), ], }); HTML Output html <header class=\"custom-header-class\"> <!-- Block-level content can go here --> </header> ",
    "url": "/extension-header"
  },
  {
    "id": "extension-heading",
    "title": "README",
    "content": " Heading Extension for Fusion Editor - @fusion/extension-heading Overview The Heading extension provides support for <h1> to <h6> elements in Fusion Editor. This extension allows you to create and manage headings, which are essential for structuring content and indicating the hierarchy of information. Features - Multi-Level Headings: Supports all six heading levels (<h1> to <h6>). - Customizable HTML Attributes: Allows customization of HTML attributes for each heading level. - Keyboard Shortcuts: Provides keyboard shortcuts for setting and toggling headings. - Input Rules: Enables markdown-like syntax (, , etc.) to create headings. Configuration Default Configuration The Heading extension is highly customizable with sensible defaults: - Name: heading - Group: block (Headings are treated as block-level elements.) - Content: inline (Allows inline content, such as text, within headings.) - Levels: [1, 2, 3, 4, 5, 6] (Supports all heading levels.) - HTML Attributes: {} (Custom HTML attributes for the headings.) - Defining: true (Indicates that the node is defining.) Commands - setHeading: Sets the content as a heading with a specified level. typescript editor.commands.setHeading({ level: 1 }); - toggleHeading: Toggles the content between a heading and a paragraph. typescript editor.commands.toggleHeading({ level: 1 }); Markdown or Input Rules Markdown Syntax: Allows users to type and space followed, that creates -> H1, type and space followed, that creates -> H2, etc., to create headings. Usage typescript const editor = new Editor({ extensions: [ Heading.configure({ levels: [1, 2, 3, 4, 5, 6], }), ], }); HTML Output html <h1>This is a Heading Level 1</h1> <h2>This is a Heading Level 2</h2> <!-- up to h6 --> ",
    "url": "/extension-heading"
  },
  {
    "id": "extension-hgroup",
    "title": "README",
    "content": " HGroup Extension for Fusion Editor - @fusion/extension-hgroup Overview The HGroup extension provides support for the <hgroup> element in Fusion Editor. This extension allows grouping of multiple heading levels, which is useful for sections with multiple subheadings, while maintaining the hierarchical structure of content. Features - Heading Group Support: Allows grouping of multiple headings under a single <hgroup> tag. - Customizable HTML Attributes: Supports the customization of HTML attributes for the <hgroup> element. - Keyboard Shortcuts: Provides keyboard shortcuts to create an <hgroup> for ease of use. - Multi-Level Headings: Combine headings like <h1> with <h2> or <h3> for grouped headings. - Markdown or Input Rules: Supports markdown-like syntax for creating grouped headings. Configuration Default Configuration The HGroup extension is configurable with these defaults: - Name: hgroup - Group: block (The <hgroup> is treated as a block-level element.) - Content: heading+ (Allows multiple heading levels such as <h1> and <h2> to be grouped.) - HTML Attributes: {} (Allows for adding custom attributes like classes or IDs.) - Defining: true (Indicates that the node is defining.) Commands - setHGroup: Sets the content as an <hgroup> with multiple headings. typescript editor.commands.setHGroup({ content: [ { type: 'heading', attrs: { level: 1 } }, { type: 'heading', attrs: { level: 2 } }, ], }); - toggleHGroup: Toggles a selected block into an <hgroup> with headings. typescript editor.commands.toggleHGroup({ content: [ { type: 'heading', attrs: { level: 1 } }, { type: 'heading', attrs: { level: 2 } }, ], }); Markdown or Input Rules Markdown Syntax: Grouped headings can be generated using markdown-like syntax: - Type Heading followed by Subheading and they can be grouped automatically under the <hgroup> tag when the command is triggered. Usage typescript const editor = new Editor({ extensions: [ HGroup.configure({ HTMLAttributes: { class: 'heading-group' }, }), ], }); HTML Output html <hgroup> <h1>Main Heading</h1> <h2>Subheading</h2> </hgroup> ",
    "url": "/extension-hgroup"
  },
  {
    "id": "extension-highlight",
    "title": "README",
    "content": " Highlight Extension for Fusion Editor - @fusion/extension-highlight Overview The Highlight extension allows you to apply highlight formatting to text within the Fusion Editor. It supports customizable highlight colors and provides input and paste rules for markdown-like syntax. Features - Highlight Support: Enables text highlighting using the <mark> element. - Multicolor Support: Allows multiple highlight colors when enabled. - Markdown-like Syntax: Supports ==highlight== for input and paste highlighting. - Customizable HTML Attributes: Allows adding custom HTML attributes to highlighted text. - Keyboard Shortcuts: Provides shortcuts for applying highlights quickly. Configuration Default Configuration - Name: highlight - Multicolor: false (Set to true to enable custom colors) - HTML Attributes: {} (Additional HTML attributes can be applied) Keyboard Shortcuts - Mod-Shift-H: Toggles highlight formatting for the selected text. Input Rules - ==highlight==: Wraps the selected text in == to apply a highlight. Paste Rules - ==highlight==: Automatically converts ==highlight== into highlighted text when pasted. Commands - setHighlight: Applies a highlight to the selected text. typescript editor.commands.setHighlight({ color: 'yellow' }); - toggleHighlight: Toggles highlight formatting on or off. typescript editor.commands.toggleHighlight({ color: 'blue' }); - unsetHighlight: Removes the highlight formatting from the selected text. typescript editor.commands.unsetHighlight(); Example typescript import { Highlight } from '@fusion/extension-highlight'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Highlight.configure({ multicolor: true, HTMLAttributes: { class: 'custom-highlight' }, })], }); HTML Output Example html <mark data-color=\"yellow\" style=\"background-color: yellow; color: inherit\">Highlighted Text</mark> ",
    "url": "/extension-highlight"
  },
  {
    "id": "extension-history",
    "title": "README",
    "content": " History Extension for Fusion Editor - @fusion/extension-history Overview The History extension provides undo and redo functionality within the Tiptap editor. It integrates with ProseMirror's built-in history handling and allows you to manage the depth of undoable steps and the time delay for creating new history groups. Important: If you're using the @tiptap/extension-collaboration package, you should not include this extension as it conflicts with the collaboration extension, which has its own history implementation. Features - Undo recent changes. - Redo reverted changes. - Configurable history depth and group delay. - Keyboard shortcuts for undo and redo, including support for Russian keyboard layouts. Attributes | Name | Type | Default | Description | |-----------------|---------|---------|----------------------------------------------------------| | depth | number | 100 | The number of history events to store. | | newGroupDelay | number | 500 | The time in milliseconds after which a new change group is created. | Commands | Command | Description | Example | |----------|---------------------------|-----------------------------| | undo | Undo recent changes | editor.commands.undo() | | redo | Reapply reverted changes | editor.commands.redo() | Configuration The History extension accepts the following options to configure its behavior: typescript History.create({ depth: 50, // Custom history depth newGroupDelay: 1000, // Delay for grouping changes }) Keyboard Shortcuts | Shortcut | Action | |-------------------|--------------------| | Mod-z | Undo | | Shift-Mod-z | Redo | | Mod-y | Redo (alternative) | | Mod-я | Undo (Russian) | | Shift-Mod-я | Redo (Russian) | Usage Example typescript import { Editor } from '@tiptap/core' import { History } from './extensions/history' const editor = new Editor({ extensions: [ History.configure({ depth: 50, // Custom history depth newGroupDelay: 1000, // Custom group delay for new actions }), ], }) ",
    "url": "/extension-history"
  },
  {
    "id": "extension-hr",
    "title": "README",
    "content": " Horizontal Rule Extension Overview The Horizontal Rule extension allows you to insert a horizontal rule (<hr>) into your Tiptap editor. This node is a block-level element that separates content sections with a horizontal line. Features - Insert a horizontal rule (<hr>) into the editor. - Customizable via HTML attributes. - Includes input rules for inserting the horizontal rule by typing ---, ___, or . Attributes | Attribute | Description | Default | | ----------- | ----------------------------- | ------- | | class | CSS class for the <hr> | null | Commands setHorizontalRule Inserts a horizontal rule into the editor at the current selection. Usage typescript editor.commands.setHorizontalRule(); Input Rules You can insert a horizontal rule by typing any of the following patterns: - --- - ___ - These input rules will automatically convert the typed characters into a horizontal rule. Usage Example typescript const editor = new Editor({ extensions: [ HorizontalRule.configure({ HTMLAttributes: { class: 'horizontal-line', }, }), / Other extensions / ], }); HTML Output html <hr class=\"custom-hr\" /> ",
    "url": "/extension-hr"
  },
  {
    "id": "extension-iframe",
    "title": "README",
    "content": " Iframe Extension Overview The Iframe extension allows embedding of external content using the <iframe> HTML element. It supports setting attributes such as src, width, height, and more. Features - Embed external content such as videos, websites, or maps. - Customizable attributes like src, width, height, etc. - Block-level content. - Draggable and selectable. Attributes | Attribute | Description | Default | | -------------- | -------------------------------------------------------------- | --------- | | src | URL of the content to embed | null | | width | Width of the iframe element | 600 | | height | Height of the iframe element | 400 | | allow | Permissions for the iframe | null | | allowfullscreen | Whether the iframe allows fullscreen mode | false | | class | CSS classes to add to the iframe | null | | id | ID attribute for the iframe | null | Commands insertIframe Insert an <iframe> element into the editor. typescript editor.commands.insertIframe({ attrs: { src: 'https://example.com', width: '800', height: '600', allow: 'fullscreen', allowfullscreen: true, class: 'iframe-class', id: 'iframe-id', } }); Usage Example typescript import { Button } from '@fusion/extension-button'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Iframe, / other extensions / ], }); HTML Output Example html <iframe src=\"https://example.com\" width=\"800\" height=\"600\" allowfullscreen></iframe> ",
    "url": "/extension-iframe"
  },
  {
    "id": "extension-image",
    "title": "README",
    "content": " Fusion Image extensions - @fusion/extension-image The @fusion/extension-image package provides two powerful extensions for handling image nodes in your Fusion Editor: Image and InlineImage. These extensions allow for versatile rendering of images, whether they are standalone block elements or inline elements within text. Installation To install the Image extension, use npm or yarn: bash npm install @fusion/extension-image or yarn add @fusion/extension-image Usage Importing Extensions (Combined) typescript import { Image, InlineImage } from '@fusion/extension-image'; const editor = new Editor({ extensions: [ Image, InlineImage, // other extensions... ], content: <div> <p>This is a paragraph with an inline image <img src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\" alt=\"Grapefruit slice atop a pile of other slices\" /> inside it.</p> <img src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\" alt=\"Grapefruit slice atop a pile of other slices\" /> </div> , }); HTML Input and Output Example for Combined html <div> <p>This is a paragraph with an inline image <img src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\" alt=\"Grapefruit slice atop a pile of other slices\" /> inside it.</p> <img src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/grapefruit-slice-332-332.jpg\" alt=\"Grapefruit slice atop a pile of other slices\" /> </div> Input Rules Or Markdown markdown ![Image Alt Text](https://example.com/image.jpg) Configuration Options - inline (boolean): Default is true. This configures the image as an inline element. - allowBase64 (boolean): Default is true. This option enables or disables the ability to insert base64-encoded images. - HTMLAttributes (object): Default attributes to be applied to the image element. Block Image The Block Image (Just import Image) provides functionality for adding and rendering block images in the Fusion editor. This extension handles images that are not within a paragraph, ensuring they are displayed as block elements. typescript import { Image } from '@fusion/extension-image'; const editor = new Editor({ extensions: [ Image.configure({ inline: false, // By default, this extension handles block-level images. allowBase64: true, // Enables support for base64-encoded images. HTMLAttributes: { class: 'fit-picture', // Optional: Define default class or other attributes. }, }), // Other extensions... ], }); HTML Output Example html <div> <img class=\"fit-picture\" src=\"https://example.com/image.jpg\" alt=\"An example image\" /> </div> Inline Image - @fusion/extension-inline-image The InlineImage (Just import InlineImage) allows you to insert and manipulate inline images within your text content. These images are treated as inline elements and can be wrapped inside paragraphs or other inline-level containers. Usage typescript import { InlineImage } from '@fusion/extension-inline-image'; const editor = new Editor({ extensions: [ InlineImage.configure({ inline: true, // This extension handles inline images. allowBase64: true, // Enables support for base64-encoded images. HTMLAttributes: { class: 'fit-picture', // Optional: Define default class or other attributes. }, }), // Other extensions... ], }); HTML Output Example html <p>This is an inline image: <img class=\"fit-picture\" src=\"https://example.com/image.jpg\" alt=\"An example image\" /></p> Both Image and InlineImage extensions can be customized to fit your needs. - Block images are rendered as standalone block elements. - Inline images are rendered as inline elements within text. The @fusion/extension-image package is a comprehensive solution for handling images in your Fusion Editor. By using both the Image and InlineImage extensions, you can ensure that images are rendered correctly based on their context, providing a consistent and visually appealing editing experience. ",
    "url": "/extension-image"
  },
  {
    "id": "extension-image-map-area",
    "title": "README",
    "content": " Fusion Image Map Area Extension - extension-image-map-area This extension provides support for the <map> and <area> HTML elements, allowing you to create and manage image maps within the Fusion editor. These elements are essential for defining interactive areas on images. Installation To install the package, use the following command: bash npm install @fusion/extension-map-area or yarn add @fusion/extension-image Usage Here’s how you can integrate the map and area extensions into your Fusion editor setup: typescript import { MapExtension, AreaExtension } from '@fusion/extension-map-area'; const editor = new Editor({ extensions: [ // Other extensions... MapExtension, AreaExtension, ], content: <p>This is an image with an associated image map:</p> <img src=\"image.png\" usemap=\"image-map\" alt=\"An example image\" /> <map name=\"image-map\"> <area shape=\"rect\" coords=\"34,44,270,350\" href=\"https://example.com\" alt=\"Example Area\" /> </map> , }); Overview The <map> extension allows you to define an image map in your content. An image map is a way to link different parts of an image to different destinations. The <area> extension enables you to define clickable areas within an image map. Each area can have a different shape and destination. Permitted Content: Transparent content, but must have one or more <area>, <link>, or other elements that define the interactive areas. Example Usage html <!-- Photo by Juliana e Mariana Amorim on Unsplash --> <map name=\"primary\"> <area shape=\"circle\" coords=\"75,75,75\" href=\"https://developer.mozilla.org/docs/Web/JavaScript\" target=\"_blank\" alt=\"JavaScript\" /> <area shape=\"circle\" coords=\"275,75,75\" href=\"https://developer.mozilla.org/docs/Web/CSS\" target=\"_blank\" alt=\"CSS\" /> </map> <img usemap=\"primary\" src=\"https://live.mdnplay.dev/en-US/docs/Web/HTML/Element/map/parrots.jpg\" alt=\"350 x 150 picture of two parrots\" /> Note: Your Image tag must have the usemap attribute and the same has to be refered in map tag name attr. - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area You can create Image Map Area for Free at: https://www.image-map.net/ The NPM is available too: https://www.npmjs.com/package/image-map The Git Repo fot it: https://github.com/clarketm/image-map ",
    "url": "/extension-image-map-area"
  },
  {
    "id": "extension-input",
    "title": "README",
    "content": " Input Extension for Fusion Editor - @fusion/extension-input Overview This extension allows the creation of the HTML <input> tag in both block and inline formats using Tiptap. - The block-level input tag is used as a form input control, which can accept different types of input like text, password, email, etc. - The inline-level input tag is similar but allows insertion within inline contexts. Features - Supports type, value, class, id, and disabled attributes. - Can insert both block-level and inline-level input fields. Attributes - type: Specifies the type of input control (default: \"text\"). - value: Defines the default value of the input element. - class: Assigns one or more class names for CSS. - id: Provides a unique identifier for the input element. - disabled: Specifies whether the input is disabled. Commands Block-level Input typescript editor.commands.insertInput({ attrs: { type: 'text', value: 'default', class: 'input-class' }, }); Inline-level Input typescript editor.commands.insertInlineInput({ attrs: { type: 'text', value: 'default', class: 'input-class' }, }); Usage Example typescript import { Input } from '@fusion/extension-input'; // Add the extension to your editor setup const editor = new Editor({ extensions: [ Input InlineInput, / other extensions / ], }); HTML Output Example html <input type=\"text\" value=\"default\" class=\"input-class\" /> <p>Here is input inside p tag: <input type=\"text\" value=\"inline\" class=\"inline-input\" /><p> ",
    "url": "/extension-input"
  },
  {
    "id": "extension-ins",
    "title": "README",
    "content": " Ins Extension for Fusion Editor - @fusion/extension-ins Overview The Ins extension allows you to represent inserted text within the Fusion Editor. The <ins> tag is often used to mark new content that has been inserted into a document, making this extension useful for tracking document edits or changes. Features - Inline Node: Renders the <ins> element as an inline node to represent inserted content. - Command Integration: Provides commands to insert new content as an <ins> element. - Attributes: Supports cite and datetime attributes for tracking insert origin and date. Attributes - cite: Specifies a URL that explains the reason for the insertion. - datetime: Specifies the date and time of the insertion. Commands - insertIns: Inserts an <ins> element with the provided content and attributes. Configuration Default Configuration - Name: ins - Group: Inline - Inline: The extension is applied as an inline node. - Atom: The node behaves atomically. - Parse HTML: Recognizes <ins> tags when parsing HTML input. - Render HTML: Outputs <ins> tags with any additional HTML attributes. Customization You can customize the Ins extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Ins } from '@fusion/extension-ins'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Ins, / other extensions /], }); HTML Output Example html <p>This is <ins cite=\"https://example.com\" datetime=\"2024-09-17T12:00:00Z\">inserted text</ins>.</p> ",
    "url": "/extension-ins"
  },
  {
    "id": "extension-italic",
    "title": "README",
    "content": " Italic Extension for Fusion Editor - @fusion/extension-italic Overview The Italic extension allows you to italicize text within the Fusion Editor. This extension is useful for emphasizing text and providing stylistic variety in your content. Features - Inline Mark: Renders the <em> or <i> elements as an inline mark to italicize text. - Command Integration: Provides commands to set, toggle, and unset italic marks. - Keyboard Shortcuts: Easily italicize text using keyboard shortcuts. - Input & Paste Rules: Automatically applies italic formatting when using specific markdown syntax (italic or _italic_). Attributes - HTML Attributes: Customize the HTML attributes of the <em> element using the HTMLAttributes option. Commands - setItalic: Applies the italic mark to selected text. - toggleItalic: Toggles the italic mark on or off. - unsetItalic: Removes the italic mark from selected text. Configuration Default Configuration - Name: italic - Inline: The extension is applied as an inline mark. - Parse HTML: Recognizes <em> and <i> tags and font-style: italic; style when parsing HTML input. - Render HTML: Outputs <em> tags with any additional HTML attributes. Keyboard Shortcuts - Mod-i: Toggles the italic mark on or off. - Mod-I: (Alternate shortcut) Toggles the italic mark on or off. Customization You can customize the Italic extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Italic } from '@fusion/extension-italic'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Italic, / other extensions /], }); HTML Output Example html <p>This text is <em>italicized</em>.</p> ",
    "url": "/extension-italic"
  },
  {
    "id": "extension-kbd",
    "title": "README",
    "content": " Kbd Extension for Fusion Editor - @fusion/extension-kbd Overview The Kbd extension allows you to represent user keyboard input within the Fusion Editor. The extension is useful for technical writing, tutorials, and documentation where keyboard commands need to be highlighted. Features - Inline Node: Renders the <kbd> element as an inline node to represent keyboard input. - Command Integration: Provides commands to insert keyboard input as a <kbd> element. Attributes - HTML Attributes: Customize the HTML attributes of the <kbd> element using the HTMLAttributes option. Commands - insertKbd: Inserts a <kbd> element with the provided content. Configuration Default Configuration - Name: kbd - Group: Inline - Inline: The extension is applied as an inline node. - Atom: The node behaves atomically. - Parse HTML: Recognizes <kbd> tags when parsing HTML input. - Render HTML: Outputs <kbd> tags with any additional HTML attributes. Customization You can customize the Kbd extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Kbd } from '@fusion/extension-kbd'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Kbd, / other extensions /], }); HTML Output Example html <p>Press <kbd>Ctrl</kbd> + <kbd>C</kbd> to copy text.</p> ",
    "url": "/extension-kbd"
  },
  {
    "id": "extension-label",
    "title": "README",
    "content": " Label and InlineLabel Extensions for Fusion Editor - @fusion/extension-label Overview The Label and InlineLabel extensions allow you to add and manage <label> elements in Fusion Editor. These extensions support block-level and inline label usage, offering flexibility for associating labels with form elements. - Label Extension: For block-level labels that typically associate with form controls. - InlineLabel Extension: For inline labels, useful when the label needs to be part of the text flow. Features Label (Block-level) - Block-level Node: Inserts a <label> element used to associate a label with form controls. - Customizable: Supports common attributes such as for, class, and id. - Command Integration: Provides commands for inserting and managing block-level label nodes. - Draggable: Can be moved within the editor. - Atom Node: Treated as a single element in the document. InlineLabel - Inline-level Node: Allows the insertion of inline <label> elements, enabling label usage within text content. - Customizable: Supports attributes such as name, type, class, id, and more. - Command Integration: Provides commands for setting, toggling, and unsetting inline label nodes. Attributes Label (Block-level) - for: Specifies which form element a label is bound to. - class: Assigns CSS classes to the label element. - id: Unique identifier for the label element. InlineLabel - name: Specifies the name attribute of the label. - type: Defines the type of label. - value: Value of the label. - class: Assigns CSS classes. - id: Unique identifier for the inline label. Commands Block-level Label typescript editor.commands.insertLabel({ attrs: { for: 'input-id', class: 'label-class' }, content: 'Your Label', }); - insertLabel: Inserts a block-level label element with specified attributes and content. - setInlineLabel: Sets an inline label element with given attributes. - toggleInlineLabel: Toggles between an inline label and a paragraph. - unsetInlineLabel: Removes the inline label node. Usage Example Block-level Label typescript editor.commands.insertLabel({ attrs: { for: 'input-id', class: 'label-class' }, content: 'Username', }); InlineLabel typescript editor.commands.setInlineLabel({ name: 'inline-label', class: 'label-inline-class', }); Configuration typescript const editor = new Editor({ extensions: [ Label.configure({ HTMLAttributes: { // Optional class: 'my-label', }, }), InlineLabel.configure({ HTMLAttributes: { // Optional class: 'my-inline-label', }, }), ], }); HTML Output Example Label (Block-level) html <label for=\"input-id\" class=\"label-class\">Username</label> InlineLabel html <p><label class=\"label-inline-class\">Label Text</label></p> ",
    "url": "/extension-label"
  },
  {
    "id": "extension-link",
    "title": "External Link.README",
    "content": " Link Extension Overview The <link> element defines a relationship between the current document and an external resource. It is most commonly used to link stylesheets, prefetch resources, or to define other kinds of document relationships. This extension supports creating and managing external resource links within a document. Features - Supports the most common attributes of the <link> tag, including href, rel, type, media, hreflang, sizes, as, crossorigin, and referrerpolicy. - Allows the insertion of external resources like stylesheets and other linked resources in the document. - Allows dynamic customization of these attributes through commands. Tech Summary The <link> tag is used to define relationships to external resources, usually in the <head> section of an HTML document. It is used for various purposes like linking stylesheets (rel=\"stylesheet\"), icons, and preloaded resources. Attributes - href: The URL of the linked resource. - rel: Specifies the relationship between the current document and the linked resource (e.g., stylesheet, icon, preload). - type: Specifies the MIME type of the linked resource. - media: Defines for which media (screen, print) the resource is optimized. - hreflang: Specifies the language of the linked document. - sizes: Defines icon sizes (used with rel=\"icon\"). - as: Specifies the type of resource being fetched when rel=\"preload\". - crossorigin: Indicates how the linked resource should be fetched (for CORS). - referrerpolicy: Specifies how much referrer information should be included when fetching the resource. Commands Set Link typescript this.editor.commands.setLink({ href: 'https://example.com/styles.css', rel: 'stylesheet', type: 'text/css', media: 'screen', crossorigin: 'anonymous', referrerpolicy: 'no-referrer' }) Configuration typescript const editor = new Editor({ extensions: [ ExternalLink ], }); Usage Example typescript this.editor.commands.setLink({ href: 'https://example.com/styles.css', rel: 'stylesheet', media: 'screen', crossorigin: 'anonymous', referrerpolicy: 'no-referrer' }) html <link rel=\"stylesheet\" href=\"https://example.com/styles.css\" media=\"screen\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"> ",
    "url": "/extension-link"
  },
  {
    "id": "extension-link",
    "title": "README",
    "content": " Link Extension for Tiptap - @fusion/extension-link The Link extension allows you to create and manage hyperlinks in the Fusion Editor. Built on top of Tiptap, this extension provides extensive functionality for handling links, including autolinking, custom protocols, and advanced validation to prevent XSS attacks. Installation To install the Link extension, you can use npm or yarn: bash npm install @fusion/extension-link Or yarn add @tiptap/core Usage typescript import { Link } from '@fusion/extension-link'; const editor = new Editor({ extensions: [ Link.configure({ openOnClick: true, linkOnPaste: true, autolink: true, protocols: ['ftp', 'git'], // Add custom protocols if needed defaultProtocol: 'http', HTMLAttributes: { target: '_blank', rel: 'noopener noreferrer nofollow', }, validate: (url) => !!url, // Validation function for links }), // other extensions... ], }); Features - Auto Linking: Automatically add links as you type. - Custom Protocols: Support for custom protocols like ftp, git, etc. - Link Validation: Prevents XSS attacks by validating the URL. - Click to Open: Opens links on click when the editor is not in editable mode. - Paste Handling: Automatically adds links to pasted content if it contains a valid URL. Options - autolink: Automatically add links as you type. Default is true. - protocols: Array of custom protocols to be registered with linkifyjs. - defaultProtocol: Default protocol to use when no protocol is specified. Default is http. - openOnClick: Opens links on click. Default is true. - linkOnPaste: Adds a link to the current selection if the pasted content only contains a URL. Default is true. - HTMLAttributes: Additional HTML attributes to add to the link element. By default, it adds target, rel, and class. - validate: A validation function to modify link verification for the auto linker. Attributes - href: The URL to which the link points. - target: Specifies where to open the linked document. Default is _blank. - rel: Specifies the relationship between the current document and the linked document. Default is noopener noreferrer nofollow. - class: Specifies one or more class names for the link. Commands - setLink: Sets a link mark with specified attributes. - toggleLink: Toggles a link mark with specified attributes. - unsetLink: Removes the link mark. Security - This extension includes validation to prevent XSS attacks by filtering out potentially dangerous URLs. Example - Here's an example of setting up the Link extension with custom protocols and validation: typescript import { Editor } from '@tiptap/core'; import { Link } from './path-to-your-extension'; const editor = new Editor({ extensions: [ Link.configure({ autolink: true, defaultProtocol: 'https', HTMLAttributes: { target: '_blank', rel: 'noopener noreferrer', }, }), ], content: <p>This is a paragraph with a <a href=\"https://tiptap.dev\" class=\"example-class\">link to Tiptap</a>.</p> <p>Another link: <a href=\"mailto:example@example.com\">Send Email</a></p> , }); Priority The Link extension has a priority of 1000 to ensure it takes precedence in scenarios where there might be conflicts with other inline-level extensions. This can be important for maintaining consistent behavior in the editor when dealing with different types of content and formatting. HTML Output Here's what the HTML output might look like after rendering content with the Link extension: html <p>This is a paragraph with a <a href=\"https://tiptap.dev\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"example-class\">link to Tiptap</a>. </p> <p>Another link: <a href=\"mailto:example@example.com\" target=\"_blank\" rel=\"noopener noreferrer\">Send Email</a> </p> ",
    "url": "/extension-link"
  },
  {
    "id": "extension-list",
    "title": "README",
    "content": " List Extensions for Fusion - @fusion/extension-list This package includes multiple Fusion extensions for working with lists: Bullet List, Ordered List, List Item, Task List, and List Keymap. These extensions provide various list types and customization options for your editor. Overview The extensions included in this package are: - BulletList: Create and toggle bullet (unordered) lists. - OrderedList: Create and toggle ordered (numbered) lists. - ListItem: Represent individual list items in bullet or ordered lists. - TaskList: Create and toggle task lists with checkboxes. - ListKeymap: Customize key behavior for lists, enhancing the handling of backspace and delete keys. Features Bullet List - Toggle bullet lists using dashes or asterisks. - Keep marks and attributes when splitting list items. - Provides keyboard shortcut: Mod-Shift-8. Ordered List - Toggle ordered lists using number followed by a dot. - Keep marks and attributes when splitting list items. - Provides keyboard shortcut: Mod-Shift-7. - Supports start attributes for ordered lists. List Item - Supports nesting of paragraphs and other block elements inside list items. - Provides shortcuts for Enter, Tab, and Shift-Tab for list item manipulation. Task List - Toggle task lists with customizable task items. - Provides keyboard shortcut: Mod-Shift-9. List Keymap - Custom keymap for handling backspace and delete behavior in lists. - Prevents ProseMirror’s default behavior of joining list items into paragraphs. Commands Bullet List Commands - Toggle bullet list for the current selection. typescript toggleBulletList(): void Ordered List Commands - Toggle ordered list for the current selection. typescript toggleOrderedList(): void Task List Commands - Toggle task list for the current selection. typescript toggleTaskList(): void Configuration typescript import { BulletList, OrderedList, ListItem, TaskList, TaskItem, ListKeymap } from '@fusion/extension-list' const editor = new Editor({ extensions: [ BulletList, OrderedList, ListItem, TaskList, ListKeymap, ], }) BulletList typescript { itemTypeName: 'listItem', // Node name for list items HTMLAttributes: {}, // HTML attributes for the bullet list keepMarks: false, // Whether to keep marks when splitting list items keepAttributes: false, // Whether to keep attributes when splitting list items } OrderedList typescript { itemTypeName: 'listItem', // Node name for list items HTMLAttributes: {}, // HTML attributes for the ordered list keepMarks: false, // Whether to keep marks when splitting list items keepAttributes: false, // Whether to keep attributes when splitting list items start: 1, // Starting number for ordered list type: undefined, // Type of ordered list (e.g., '1', 'A', 'a', 'I', 'i') } TaskList typescript { itemTypeName: 'taskItem', // Node name for task items HTMLAttributes: {}, // HTML attributes for the task list } ListItem typescript { HTMLAttributes: {}, // HTML attributes for the list item bulletListTypeName: 'bulletList', // Node type for bullet lists orderedListTypeName: 'orderedList' // Node type for ordered lists } ListKeymap typescript { listTypes: [ { itemName: 'listItem', // Node type for list items wrapperNames: ['bulletList', 'orderedList'], // Wrapper types for bullet and ordered lists }, { itemName: 'taskItem', // Node type for task items wrapperNames: ['taskList'], // Wrapper types for task lists }, ] } Keyboard Shortcuts - BulletList: Mod-Shift-8 to toggle bullet list. - OrderedList: Mod-Shift-7 to toggle ordered list. - TaskList: Mod-Shift-9 to toggle task list. - Enter: Split the current list item. - Tab: Sink the current list item (indent). - Shift-Tab: Lift the current list item (outdent). HTML Output Example Bullet List html <ul> <li>Item 1</li> <li>Item 2</li> </ul> Ordered List html <ol start=\"1\"> <li>First item</li> <li>Second item</li> </ol> Task List html <ul data-type=\"taskList\"> <li data-type=\"taskItem\" data-checked=\"true\">flour</li> <li data-type=\"taskItem\" data-checked=\"true\">baking powder</li> <li data-type=\"taskItem\" data-checked=\"true\">salt</li> <li data-type=\"taskItem\" data-checked=\"false\">sugar</li> <li data-type=\"taskItem\" data-checked=\"false\">milk</li> <li data-type=\"taskItem\" data-checked=\"false\">eggs</li> <li data-type=\"taskItem\" data-checked=\"false\">butter</li> </ul> ",
    "url": "/extension-list"
  },
  {
    "id": "extension-main",
    "title": "README",
    "content": " Main Extension for Fusion Editor - @fusion/extension-main Overview The Main extension allows you to insert <main> elements within the Fusion Editor. The <main> tag is used to represent the dominant content of a document, crucial for accessibility and structure. Features - Block Node: Renders the <main> tag as a block-level node. - Command Integration: Provides a command to insert the <main> element with optional attributes like id and class. - HTML Attributes: Supports standard HTML attributes to customize the <main> element. Attributes - class: Adds custom classes to the <main> element. - id: Assigns an ID to the <main> element for identification. Commands - insertMain: Inserts a <main> element with the specified attributes and content. Configuration Default Configuration - Name: main - Block: The extension is applied as a block-level node. - Parse HTML: Recognizes the <main> tag and its attributes when parsing HTML input. - Render HTML: Outputs a <main> tag with the provided attributes and content. Customization You can customize the Main extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Main } from '@fusion/extension-main'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Main, / other extensions /], }); HTML Output Example html <main id=\"main-section\" class=\"content-main\"> <p>Main content goes here.</p> </main> ",
    "url": "/extension-main"
  },
  {
    "id": "extension-mark",
    "title": "README",
    "content": " Mark Extension for Fusion Editor - @fusion/extension-mark Overview The Mark extension allows you to insert <mark> elements to highlight text within the Fusion Editor. The <mark> tag is used to highlight parts of text that are of relevance to the user. Features - Inline Node: Renders the <mark> tag as an inline node to highlight text. - Command Integration: Provides a command to insert the mark element with specific attributes such as class and id. - HTML Attributes: Supports attributes such as class and id for the <mark> element. Attributes - class: Adds custom classes to the <mark> element. - id: Assigns an ID to the <mark> element for identification. Commands - insertMark: Inserts a <mark> element with the specified attributes and content. Configuration Default Configuration - Name: mark - Inline: The extension is applied as an inline node. - Parse HTML: Recognizes the <mark> tag and its attributes when parsing HTML input. - Render HTML: Outputs a <mark> tag with the provided attributes and content. Customization You can customize the Mark extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Mark } from '@fusion/extension-mark'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Mark, / other extensions /], }); HTML Output Example html <p>This is <mark class=\"highlight\">highlighted</mark> text.</p> ",
    "url": "/extension-mark"
  },
  {
    "id": "extension-media",
    "title": "README",
    "content": " Audio, Video, and Picture Extensions for Fusion Editor - @fusion/extension-media Overview Audio The Audio extension allows for the embedding and control of audio elements within the Fusion Editor. It supports both block-level and inline audio elements, accommodating various sources and fallback content. Video The Video extension allows for the embedding and control of video elements within the Fusion Editor. Like the Audio extension, it supports block-level and inline video elements and handles multiple sources. Picture The Picture extension enables the use of the <picture> element in the Fusion Editor, which is essential for responsive images. It allows specifying multiple image sources and formats to adapt to different screen sizes or resolutions. Features - Block and Inline Audio Support: Audio, Video and Picture can be rendered as either block-level or inline elements based on context. - Multiple Sources Support: Handles multiple <source> elements within the <audio>, <video>, <picture> tags. - Fallback Content: Allows the inclusion of fallback text within the <audio>, <video>, <picture> element for unsupported browsers. - Responsive Images: Supports the <picture> element to provide multiple image sources. - Source and Image Handling: Manages <source> elements within <picture> and the fallback <img> element. Audio Example typescript import { Audio, InlineAudio, Source } from '@fusion/extension-media'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Audio, InlineAudio, Source / other extensions /], }); HTML Output html <audio controls src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3\"></audio> <p>Audio inside paragraph tag <audio controls src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3\"></audio> <a href=\"https://interactive-examples.mdn.mozilla.net/media/cc0-audio/t-rex-roar.mp3\"> Download audio </a> </p> <audio controls> <source src=\"https://www.w3schools.com/tags/horse.ogg\" type=\"audio/ogg\"> <source src=\"https://www.w3schools.com/tags/horse.mp3\" type=\"audio/mpeg\"> Your browser does not support the audio tag. </audio> Video Example typescript import { Video, InlineVideo, Source } from '@fusion/extension-media'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Video, InlineVideo, Source / other extensions /], }); HTML Output html <p> The controls attribute adds video controls, <video controls src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/friday.mp4\"> <track default kind=\"captions\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/friday.vtt\" /> </video> like play, pause, and volume. </p> <video controls width=\"250\"> <source src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm\" type=\"video/webm\" /> <source src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\" type=\"video/mp4\" /> Download the <a href=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm\">WEBM</a> or <a href=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\">MP4</a> video. </video> <video controls src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/friday.mp4\"> <track default kind=\"captions\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/friday.vtt\" /> </video> Picture Example typescript import { Picture, InlinePicture, Source } from '@fusion/extension-media'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Picture, InlinePicture, Source / other extensions /], }); HTML Output html <picture> <source srcset=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/surfer-240-200.jpg\" media=\"(orientation: portrait)\" /> <img src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/painted-hand-298-332.jpg\" alt=\"\" /> </picture> <p> <picture> <source srcset=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/surfer-240-200.jpg\" media=\"(orientation: portrait)\" /> <img src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-images/painted-hand-298-332.jpg\" alt=\"\" /> </picture> </p> ",
    "url": "/extension-media"
  },
  {
    "id": "extension-menu",
    "title": "README",
    "content": " Menu Extension for Fusion Editor - @fusion/extension-menu Overview The Menu extension allows you to insert <menu> elements within the Fusion Editor. The <menu> tag represents a group of commands or options and can be used to create toolbars, context menus, and more. Features - Block Node: Renders the <menu> tag as a block-level node. - Command Integration: Provides a command to insert menu elements with specified attributes like type and label. - HTML Attributes: Supports attributes such as type (default: \"list\") and label. Attributes - type: Specifies the type of the menu (list, toolbar, or context). Defaults to list. - label: Provides a label for the menu (for accessibility purposes). Commands - insertMenu: Inserts a <menu> element with the specified attributes and content. Configuration Default Configuration - Name: menu - Block: The extension is applied as a block node. - Parse HTML: Recognizes the <menu> tag and its attributes when parsing HTML input. - Render HTML: Outputs a <menu> tag with the provided attributes and content. Customization You can customize the Menu extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Menu } from '@fusion/extension-menu'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Menu, / other extensions /], }); HTML Output Example html <menu type=\"toolbar\" label=\"Main Menu\">...</menu> ",
    "url": "/extension-menu"
  },
  {
    "id": "extension-meta",
    "title": "README",
    "content": " Meta Extension for Fusion Editor - @fusion/extension-meta Overview The Meta extension allows you to insert <meta> tags within the Fusion Editor. Meta tags provide metadata about the HTML document, and this extension is useful for setting SEO information, character sets, or page settings. Features - Block Node: Inserts <meta> tags as block-level nodes. - Command Integration: Provides a command to insert meta tags with various attributes. - HTML Attributes: Supports common <meta> attributes like name, content, charset, and http-equiv. Attributes - name: The name of the metadata (e.g., \"description\"). - content: The content of the metadata (e.g., \"A brief description\"). - charset: The character encoding for the HTML document. - http-equiv: Used to provide HTTP header information (e.g., \"refresh\"). - id: The unique identifier for the <meta> element. Commands - insertMeta: Inserts a <meta> element with specified attributes. Configuration Default Configuration - Name: meta - Block: The extension is applied as a block node. - Parse HTML: Recognizes <meta> tags and extracts their attributes when parsing HTML input. - Render HTML: Outputs <meta> tags with any specified attributes. Customization You can customize the Meta extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Meta } from '@fusion/extension-meta'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Meta, / other extensions /], }); HTML Output Example html <meta name=\"description\" content=\"A brief description\" /> ",
    "url": "/extension-meta"
  },
  {
    "id": "extension-meter",
    "title": "README",
    "content": " <meter> Extension for Fusion Editor - @fusion/extension-meter Overview The <meter> extension allows you to display a scalar measurement within a known range. It is commonly used to represent values such as disk usage, the relevance of a query result, or a voting score. Features - Semantic Measurement: Provides a semantic representation of a measurement within a range. - Customizable Attributes: Supports attributes like min, max, low, high, optimum, and value to configure the meter display. - Inline Content: The <meter> tag is treated as inline content, allowing it to be embedded in a block of text. Attributes - HTML Attributes: Customize the HTML attributes of the <meter> element using the HTMLAttributes option. - min: The minimum value of the range. - max: The maximum value of the range. - low: The lower bound of the \"low\" range. - high: The lower bound of the \"high\" range. - optimum: The optimum value in the range. - value: The current value of the meter. Commands - insertMeter: Inserts a <meter> element into the document with optional attributes. Configuration Default Configuration - Name: meter - Group: The extension is applied as an inline element. - Content: The extension can contain inline content. - Parse HTML: Recognizes <meter> tags when parsing HTML input. - Render HTML: Outputs <meter> tags with any additional HTML attributes. Keyboard Shortcuts - None: Currently, no default keyboard shortcuts are defined for this extension. Customization You can customize the <meter> extension by passing in attributes like value, min, and max through the insertMeter command. Usage Example typescript import { MeterExtension } from '@fusion/extension-meter'; // Add the extension to your editor setup const editor = new Editor({ extensions: [MeterExtension, / other extensions /], }); // Insert a <meter> element editor.commands.insertMeter({ attrs: { value: 0.7, min: 0, max: 1, optimum: 0.9 }, content: [{ type: 'text', text: '70%' }], }); HTML Output Example html <p>The relevance score is <meter value=\"0.7\" min=\"0\" max=\"1\" optimum=\"0.9\">70%</meter>.</p> ",
    "url": "/extension-meter"
  },
  {
    "id": "extension-nav",
    "title": "README",
    "content": " <nav> Extension for Fusion Editor - @fusion/extension-nav Overview The <nav> extension allows you to include navigational links in the Fusion Editor. This extension is useful for structuring sections that link to other parts of the site or page, typically containing a list of navigation links. Features - Semantic Navigation: Provides the ability to create semantic navigation bars or sections within your content. - Flexible Content: Supports block-level content like lists and headings inside the <nav> tag. - Customizable Attributes: Add custom attributes to the <nav> tag for enhanced flexibility. Attributes - HTML Attributes: Customize the HTML attributes of the <nav> element using the HTMLAttributes option. Commands - insertNav: Inserts a <nav> element into the document. Configuration Default Configuration - Name: nav - Group: The extension is applied as a block-level node. - Content: The extension can contain block-level content. - Parse HTML: Recognizes <nav> tags when parsing HTML input. - Render HTML: Outputs <nav> tags with any additional HTML attributes. Customization You can customize the <nav> extension by passing in content or attributes through the insertNav command. Usage Example typescript import { NavExtension } from '@fusion/extension-nav'; // Add the extension to your editor setup const editor = new Editor({ extensions: [NavExtension, / other extensions /], }); // Insert a <nav> element editor.commands.insertNav({ content: [ { type: 'paragraph', content: [{ type: 'text', text: 'Home' }] }, { type: 'paragraph', content: [{ type: 'text', text: 'About' }] } ] }); HTML Output Example html <nav> <p>Home</p> <p>About</p> </nav> ",
    "url": "/extension-nav"
  },
  {
    "id": "extension-noscript",
    "title": "README",
    "content": " <noscript> Extension for Fusion Editor - @fusion/extension-noscript Overview The <noscript> extension allows you to include content that will be displayed when JavaScript is disabled in the user's browser. This extension is useful for providing alternative content or instructions to users who have JavaScript turned off. Features - JavaScript Fallback: Displays content when JavaScript is disabled. - Versatile Content: Supports any HTML content within the <noscript> tag. - Customizable Display: Customize the fallback content as needed. Attributes - HTML Attributes: Customize the HTML attributes of the <noscript> element using the HTMLAttributes option. Commands - insertNoscript: Inserts a <noscript> element into the document. Configuration Default Configuration - Name: noscript - Group: The extension is applied as a block-level element. - Parse HTML: Recognizes <noscript> tags when parsing HTML input. - Render HTML: Outputs <noscript> tags with any additional HTML attributes. Keyboard Shortcuts - None: Currently, no default keyboard shortcuts are defined for this extension. Customization You can customize the <noscript> extension by passing in content through the content option in the insertNoscript command. Usage Example typescript import { NoscriptExtension } from '@fusion/extension-noscript'; // Add the extension to your editor setup const editor = new Editor({ extensions: [NoscriptExtension, / other extensions /], }); // Insert a <noscript> element editor.commands.insertNoscript({ content: [ { type: 'paragraph', content: [{ type: 'text', text: 'JavaScript is disabled. Please enable JavaScript for a better experience.' }] } ] }); HTML Output Example When rendered, the <noscript> tag will display as follows if JavaScript is disabled: typescript <noscript> <p>JavaScript is disabled. Please enable JavaScript to view this content.</p> </noscript> ",
    "url": "/extension-noscript"
  },
  {
    "id": "extension-object",
    "title": "README",
    "content": " <object> Extension for Fusion Editor Overview The <object> extension allows you to embed objects, such as multimedia or interactive content, within your Fusion Editor. This extension supports various types of objects, providing a flexible way to include external content. Features - Embedding Objects: Allows embedding various types of objects including images, videos, and interactive content. - Flexible Attributes: Supports a range of attributes to customize the embedded object. - Fallback Content: Provides fallback content if the object cannot be displayed. Attributes - data: Specifies the URL of the object to embed. - type: Defines the type of object being embedded (e.g., image/jpeg). - width: Sets the width of the object. - height: Sets the height of the object. - name: Provides a name for the object. Commands - To insert an <object> into your document, use the following command: typescript editor.commands.insertContent({ type: 'object', attrs: { data: 'https://example.com/object', type: 'image/jpeg', width: '600', height: '400', name: 'Sample Object' } }); Usage Example typescript import { ObjectExtension } from '@fusion/extension-object'; const editor = new Editor({ extensions: [ ObjectExtension, // other extensions ], }); HTML Output Example html <object data=\"https://example.com/object\" type=\"image/jpeg\" width=\"600\" height=\"400\" name=\"Sample Object\"> <!-- Fallback content --> <p>Your browser does not support the object tag.</p> </object> ",
    "url": "/extension-object"
  },
  {
    "id": "extension-opt-group",
    "title": "README",
    "content": " Optgroup Extension for Fusion Editor - @fusion/extension-optgroup Overview The Optgroup extension allows you to group related <option> elements within a <select> dropdown in the Fusion Editor. This extension is useful for organizing long lists of options into manageable categories. Features - Block Node: Renders the <optgroup> element as a block node to group <option> elements within a <select> dropdown. - Command Integration: Provides commands to set and unset the <optgroup> node. - Attributes: Supports attributes like label and disabled to customize the behavior of the <optgroup> element. Attributes - label: Sets the label for the group of options. - disabled: Disables the group of options, preventing user interaction. - HTML Attributes: Customize the HTML attributes of the <optgroup> element using the HTMLAttributes option. Commands - setOptgroup: Applies the <optgroup> node to wrap <option> elements. - unsetOptgroup: Removes the <optgroup> node. Configuration Default Configuration - Name: optgroup - Content: The node contains <option> elements. - Group: The extension is applied as a block node. - Parse HTML: Recognizes <optgroup> tags and their attributes when parsing HTML input. - Render HTML: Outputs <optgroup> tags with any additional HTML attributes. Usage Example typescript import { Optgroup } from '@fusion/extension-optgroup'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Optgroup, / other extensions /], }); HTML Output Example html <label for=\"dino-select\">Choose a dinosaur:</label> <select id=\"dino-select\"> <optgroup label=\"Theropods\"> <option>Tyrannosaurus</option> <option>Velociraptor</option> <option>Deinonychus</option> </optgroup> <optgroup label=\"Sauropods\"> <option>Diplodocus</option> <option>Saltasaurus</option> <option>Apatosaurus</option> </optgroup> </select> ",
    "url": "/extension-opt-group"
  },
  {
    "id": "extension-option",
    "title": "README",
    "content": " Option Extension for Fusion Editor - @fusion/extension-option Overview The Option extension allows you to create <option> elements within the Fusion Editor. The <option> element is typically used within a <select> dropdown menu, providing users with selectable options. Features - Selectable Options: Create options within a dropdown menu. - Customizable Attributes: Supports common attributes like value, selected, disabled, and label. - Inline Content: Designed to be used within inline groups. Renders the <option> element as an inline node. Commands - setOption: Adds an option element to the editor with the specified attributes. typescript editor.commands.setOption({ value: '1', selected: true, disabled: false, label: 'Option 1', }); - unsetOption: Removes the option node. typescript editor.commands.unsetOption(); Configuration Default Configuration - Name: option - Group: inline - Content: text (Allows text content inside the option.) - Parse HTML: Recognizes <option> tags when parsing HTML input. - Render HTML: Outputs <option> tags with any additional HTML attributes. Customization You can customize the Option extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Option } from '@fusion/extension-option'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Option, / other extensions /], }); HTML Output - This Option extension supports creating and manipulating <option> elements in the editor, providing flexibility for managing dropdown options or select inputs within your content. html <option value=\"1\">Option 1</option> ",
    "url": "/extension-option"
  },
  {
    "id": "extension-output",
    "title": "README",
    "content": " Output Extension for Fusion Editor - @fusion/extension-output Overview The Output extension allows you to include the <output> HTML element in your Fusion Editor. The <output> element is typically used to display the result of a calculation or user action, often in association with <input> elements. Features - Display Calculation Results: Use the <output> element to display dynamic results. - Associations: The for attribute allows you to associate the output with one or more input elements. - Name Attribute: The name attribute allows the element to be identified within forms. Commands - setOutput: Adds an output element to the editor with optional attributes. typescript editor.commands.setOutput({ for: 'inputId', name: 'result' }); Attributes - for: The for attribute links the output element to one or more form elements - name: The name attribute represents the name of the output element, which is submitted with the form. Usage Example typescript import { Output } from '@fusion/extension-output'; const editor = new Editor({ extensions: [ Output.configure({ HTMLAttributes: { class: 'custom-output', }, }), // other extensions ], }); editor.commands.setOutput({ for: 'inputId', name: 'calculationResult' }); HTML Output Example html <form oninput=\"result.value=parseInt(a.value)+parseInt(b.value)\"> <input type=\"range\" id=\"a\" value=\"50\"> + <input type=\"number\" id=\"b\" value=\"50\"> <output name=\"result\" for=\"a b\">100</output> </form> ",
    "url": "/extension-output"
  },
  {
    "id": "extension-paragraph",
    "title": "README",
    "content": " Paragraph Extension for Fusion Editor - extension-paragraph Overview The Paragraph extension provides support for <p> elements in Fusion Editor. This extension allows you to create and manipulate paragraphs, which are fundamental for structuring text content in HTML. The extension is designed to integrate smoothly with other editor extensions and maintain a clean and semantic structure. Features - Standard Paragraph Support: Enables the use of <p> elements to wrap and format blocks of text. - Customizable HTML Attributes: Allows customization of HTML attributes for paragraphs. - Keyboard Shortcuts: Provides a default keyboard shortcut for quickly setting paragraphs. Keyboard Shortcuts - Mod-Alt-0: Sets the selected content or cursor position to a paragraph. Configuration Default Configuration The Paragraph extension comes with sensible defaults that are suitable for most use cases. Here’s a breakdown of its configuration: - Name: paragraph - Group: block (Paragraphs are treated as block-level elements.) - Content: inline (Allows inline content, such as text, to be placed inside the paragraph.) - Parse HTML: Recognizes <p> tags when parsing HTML input. - Render HTML: Outputs <p> tags with any additional HTML attributes. - Priority: 1000 (Ensures that the paragraph extension takes precedence in scenarios with potential conflicts.) Example Here’s an example of how to use the Paragraph extension: typescript import { Paragraph } from './path/to/your/paragraph-extension'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Paragraph, / other extensions /], }); HTML Output HTML <p>This is a paragraph of text.</p> ",
    "url": "/extension-paragraph"
  },
  {
    "id": "extension-placeholder",
    "title": "README",
    "content": " Placeholder Extension - @fusion/extension-placeholder The Placeholder extension adds customizable placeholder text to the editor or specific nodes when they are empty. This extension provides flexible options for when and where placeholders should appear within the editor content. Overview Placeholders are helpful for guiding users on what content to add by displaying text when an editor or node is empty. This extension supports both static and dynamic placeholders. Features - Add placeholder text to the entire editor or to individual empty nodes. - Show placeholders only when the editor is editable or regardless of editability. - Support for custom placeholder text as a string or a function. - Options to control the depth and behavior of placeholders within nested content. Options | Option | Type | Default | Description | |------------------------|------------------------------------------|-----------------------|-------------| | emptyEditorClass | string | 'is-editor-empty' | CSS class name applied to the entire editor when it is empty. | | emptyNodeClass | string | 'is-empty' | CSS class name applied to empty nodes. | | placeholder | string \\| function | 'Write something …' | Placeholder text, which can be static or generated by a function. | | showOnlyWhenEditable | boolean | true | Show placeholders only when the editor is editable. | | showOnlyCurrent | boolean | true | Show placeholders only for the currently selected node. | | includeChildren | boolean | false | Show placeholders for all descendant nodes. | Installation To use the Placeholder extension, import it into your editor configuration: typescript import { Placeholder } from 'path/to/placeholder-extension'; Usage - Add the Placeholder extension to the editor’s extensions with your preferred options: typescript import { Placeholder } from 'path/to/placeholder-extension'; const editor = new Editor({ extensions: [ Placeholder.configure({ emptyEditorClass: 'is-editor-empty', emptyNodeClass: 'is-empty', placeholder: 'Start typing here …', showOnlyWhenEditable: true, showOnlyCurrent: true, includeChildren: false, }), // other extensions ], }); Example CSS for Placeholder Styling - You can use CSS to style the placeholder content, controlling its appearance when nodes or the editor are empty: css / Placeholder styling for the empty editor / .tiptap p.is-editor-empty:first-child::before { color: adb5bd; content: attr(data-placeholder); float: left; height: 0; pointer-events: none; } / Placeholder styling for empty nodes / .tiptap p.is-empty::before { color: adb5bd; content: attr(data-placeholder); float: left; height: 0; pointer-events: none; } ",
    "url": "/extension-placeholder"
  },
  {
    "id": "extension-progress",
    "title": "README",
    "content": " Progress Extension for Fusion Editor - @fusion/extension-progress Overview The Progress extension allows you to include a progress bar within the Fusion Editor. This is particularly useful for visually indicating the completion status of a task or the progress of a download. Features - Block Node: Renders the <progress> element as a block-level node. - Command Integration: Provides a command to set the <progress> node with configurable attributes like value and max. - Custom HTML Attributes: Allows customization of the HTML attributes for the <progress> element. Attributes - HTML Attributes: Customize the HTML attributes of the <progress> element using the HTMLAttributes option. - Value: Specifies how much of the task has been completed. - Max: Specifies the total amount of work to complete the task. Commands - setProgress: Inserts the <progress> node with optional value and max attributes. typescript editor.commands.setProgress({ value: 0.5, max: 1.0 }); Configuration Default Configuration - Name: progress - Block: The extension is applied as a block node. - Parse HTML: Recognizes <progress> tags when parsing HTML input. - Render HTML: Outputs <progress> tags with any additional HTML attributes. Usage Example typescript import { Progress } from '@fusion/extension-progress'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Progress, / other extensions /], }); HTML Output Example html <p>Task progress: <progress value=\"0.5\" max=\"1.0\"></progress></p> ",
    "url": "/extension-progress"
  },
  {
    "id": "extension-quotation",
    "title": "README",
    "content": " Q Extension for Fusion Editor - @fusion/extension-q Overview The Q extension allows you to create inline quotations within the Fusion Editor. This is particularly useful for citing short passages of text or adding inline quotes to your content. Features - Inline Node: Renders the <q> element as an inline node to represent inline quotations. - Command Integration: Provides a command to set or toggle the <q> node. - Custom HTML Attributes: Allows customization of the HTML attributes for the <q> element. Attributes - HTML Attributes: Customize the HTML attributes of the <q> element using the HTMLAttributes option. Commands - setQ: Inserts or toggles the <q> node in the editor. typescript editor.commands.setQ(); Configuration Default Configuration - Name: q - Inline: The extension is applied as an inline node. - Parse HTML: Recognizes <q> tags when parsing HTML input. - Render HTML: Outputs <q> tags with any additional HTML attributes. Usage Example typescript import { Q } from '@fusion/extension-q'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Q, / other extensions /], }); HTML Output Example html <p>This is an example of an <q>inline quotation</q>.</p> ",
    "url": "/extension-quotation"
  },
  {
    "id": "extension-ruby",
    "title": "README",
    "content": " Ruby Extension for Fusion Editor - @fusion/extension-ruby Overview The Ruby extension allows you to add ruby annotations (small text above or beside the base text) within the Fusion Editor. Ruby annotations are typically used in East Asian typography to show the pronunciation of characters. Features - Inline Node: Renders the <ruby> element as an inline node to display ruby annotations. - Command Integration: Provides commands to set the ruby node. - Customizable HTML Attributes: Supports passing custom HTML attributes to the <ruby> element. Attributes - HTML Attributes: Customize the HTML attributes of the <ruby> element using the HTMLAttributes option. Commands - setRuby: Applies the ruby node to the selected text. typescript editor.commands.setRuby(); Configuration Default Configuration - Name: ruby - Inline: The extension is applied as an inline node. - Parse HTML: Recognizes <ruby> tags when parsing HTML input. - Render HTML: Outputs <ruby> tags with any additional HTML attributes. Usage Example typescript import { Ruby } from '@fusion/extension-ruby'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Ruby, / other extensions /], }); HTML Output Example html <ruby> 明日 <rp>(</rp><rt>Ashita</rt><rp>)</rp> </ruby> ",
    "url": "/extension-ruby"
  },
  {
    "id": "extension-samp",
    "title": "README",
    "content": " Samp Extension for Fusion Editor - @fusion/extension-samp Overview The Samp extension allows you to represent sample output from a computer program within the Fusion Editor. This extension is useful for including sample text or code output in your content. Features - Inline Node: Renders the <samp> element as an inline node to display sample output. - Command Integration: Provides commands to set the samp node. Attributes - HTML Attributes: Customize the HTML attributes of the <samp> element using the HTMLAttributes option. Commands - setSamp: Inserts a sample output node at the current position. typescript editor.commands.setSamp(); Configuration Default Configuration - Name: samp - Inline: The extension is applied as an inline node. - Parse HTML: Recognizes <samp> tags when parsing HTML input. - Render HTML: Outputs <samp> tags with any additional HTML attributes. Usage Example typescript import { Samp } from '@fusion/extension-samp'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Samp, / other extensions /], }); HTML Output Example html <p>This is <samp>sample output</samp> text.</p> ",
    "url": "/extension-samp"
  },
  {
    "id": "extension-search",
    "title": "README",
    "content": " Search Extension for Fusion Editor - @fusion/extension-search Overview The Search extension allows you to include a <search> element within the Fusion Editor. This element is used to semantically represent search or filtering functionality within your content. Features - Block Node: Adds a <search> element as a block-level node. - Command Integration: Provides commands to insert a <search> element into the editor content. - Keyboard Shortcuts: Insert a <search> element using keyboard shortcuts. Attributes - HTML Attributes: Customize the HTML attributes of the <search> element using the HTMLAttributes option. Commands - setSearch: Inserts a <search> element into the editor content. typescript editor.commands.setSearch(); Configuration Default Configuration - Name: search - Group: block - Content: Accepts any flow content inside the <search> element. - Parse HTML: Recognizes the <search> tag when parsing HTML input. - Render HTML: Outputs the <search> tag with any additional HTML attributes. Usage Example typescript import { Search } from '@fusion/extension-search'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Search, / other extensions /], }); HTML Output Example html <search> <form action=\"./search/\"> <label for=\"movie\">Find a Movie</label> <input type=\"search\" id=\"movie\" name=\"q\" /> <button type=\"submit\">Search</button> </form> </search> ",
    "url": "/extension-search"
  },
  {
    "id": "extension-section",
    "title": "README",
    "content": " Section Extension for Fusion Editor - @fusion/extension-section Overview The Section extension allows you to insert a <section> element within the Fusion Editor. This extension is useful for defining sections of your document, which are thematically grouped content blocks. Features - Block Node: Renders the <section> element as a block node to group related content. - Command Integration: Provides commands to insert a section element with customizable attributes. Attributes - HTML Attributes: Customize the HTML attributes of the <section> element using the HTMLAttributes option. - id: Specifies a unique ID for the section element. Commands - setSection: Inserts a section element at the current cursor position. typescript editor.commands.setSection({ id: 'section1' }); Configuration Default Configuration - Name: section - Block: The extension is applied as a block node. - Content: Accepts one or more block elements within the section. - Parse HTML: Recognizes <section> tags and their attributes when parsing HTML input. - Render HTML: Outputs <section> tags with any additional HTML attributes. Usage Example typescript import { Section } from '@fusion/extension-section'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Section, / other extensions /], }); HTML Output Example html <section id=\"section1\"> <h2>Section Title</h2> <p>This is some content inside a section.</p> </section> ",
    "url": "/extension-section"
  },
  {
    "id": "extension-select",
    "title": "README",
    "content": " Select Extension for Fusion Editor - @fusion/extension-select Overview The Select extension allows you to insert a <select> element within the Fusion Editor. This is useful for creating dropdown menus or multi-select options in your content. Features - Block Node: Renders the <select> element as a block node to allow dropdown selections. - Command Integration: Provides commands to insert a select element with customizable attributes. Attributes - HTML Attributes: Customize the HTML attributes of the <select> element using the HTMLAttributes option. - name: Specifies a name for the select element. - multiple: Enables multiple selections if set to true. - required: Marks the select element as required if set to true. Commands - setSelect: Inserts a select element at the current cursor position. typescript editor.commands.setSelect({ name: 'dropdown', multiple: false, required: true }); Configuration Default Configuration - Name: select - Block: The extension is applied as a block node. - Parse HTML: Recognizes <select> tags and their attributes when parsing HTML input. - Render HTML: Outputs <select> tags with any additional HTML attributes. Usage Example typescript import { Select } from '@fusion/extension-select'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Select, / other extensions /], }); HTML Output Example html <label for=\"dropdown\">Choose an option:</label> <select name=\"dropdown\" required> <option value=\"1\">Option 1</option> <option value=\"2\">Option 2</option> <option value=\"3\">Option 3</option> </select> ",
    "url": "/extension-select"
  },
  {
    "id": "extension-slot",
    "title": "README",
    "content": " Slot Extension for Fusion Editor - @fusion/extension-slot Overview The Slot extension allows you to insert a <slot> element within the Fusion Editor. This is particularly useful when working with web components, enabling content projection. Features - Inline Node: Renders the <slot> element as an inline node. - Command Integration: Provides commands to insert a slot element with optional attributes. Attributes - HTML Attributes: Customize the HTML attributes of the <slot> element using the HTMLAttributes option. - name: Specifies a name for the slot, enabling named slots in web components. Commands - setSlot: Inserts a slot element at the current cursor position. typescript editor.commands.setSlot({ name: 'default' }); Configuration Default Configuration - Name: slot - Inline: The extension is applied as an inline node. - Parse HTML: Recognizes <slot> tags and their attributes when parsing HTML input. - Render HTML: Outputs <slot> tags with any additional HTML attributes. Usage Example typescript import { Slot } from '@fusion/extension-slot'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Slot, / other extensions /], }); HTML Output Example html <p>This is a <slot name=\"default\"></slot> slot element.</p> ",
    "url": "/extension-slot"
  },
  {
    "id": "extension-small",
    "title": "README",
    "content": " Small Extension for Fusion Editor - @fusion/extension-small Overview The Small extension allows you to format text as smaller than the surrounding text within the Fusion Editor. This extension is useful for making text appear less prominent. Features - Inline Mark: Renders the <small> element as an inline mark to reduce the font size of text. - Command Integration: Provides commands to set, toggle, and unset small marks. - Keyboard Shortcuts: Easily apply the small format using keyboard shortcuts. Attributes - HTML Attributes: Customize the HTML attributes of the <small> element using the HTMLAttributes option. Commands - setSmall: Applies the small mark to selected text. typescript editor.commands.setSmall(); - toggleSmall: Toggles the small mark on or off. typescript editor.commands.toggleSmall(); - unsetSmall: Removes the small mark from selected text. typescript editor.commands.unsetSmall(); Configuration Default Configuration - Name: small - Inline: The extension is applied as an inline mark. - Parse HTML: Recognizes <small> tags and font-size: small; style when parsing HTML input. - Render HTML: Outputs <small> tags with any additional HTML attributes. Usage Example typescript import { Small } from '@fusion/extension-small'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Small, / other extensions /], }); HTML Output Example html <p><small>The content is licensed under a Creative Commons Attribution-ShareAlike 2.5 Generic License.</small></p> ",
    "url": "/extension-small"
  },
  {
    "id": "extension-span",
    "title": "README",
    "content": " extension-span This library was generated with [Nx](https://nx.dev). Running unit tests Run nx test extension-span to execute the unit tests. ",
    "url": "/extension-span"
  },
  {
    "id": "extension-strike",
    "title": "README",
    "content": " Strike Extension for Fusion Editor - @fusion/extension-strike Overview The Strike extension allows you to apply strikethrough formatting to text within the Fusion Editor. This is particularly useful for marking text as obsolete or deleted. Features - Inline Mark: Renders the <s>, <del>, or <strike> elements as an inline mark to strike through text. - Command Integration: Provides commands to set, toggle, and unset strikethrough marks. - Keyboard Shortcuts: Easily apply strikethrough using keyboard shortcuts. - Input & Paste Rules: Automatically applies strikethrough formatting when using specific markdown syntax (strike). Attributes - HTML Attributes: Customize the HTML attributes of the <s> element using the HTMLAttributes option. Commands - setStrike: Applies the strikethrough mark to selected text. typescript editor.commands.setStrike(); - toggleStrike: Toggles the strikethrough mark on or off. typescript editor.commands.toggleStrike(); - unsetStrike: Removes the strikethrough mark from selected text. typescript editor.commands.unsetStrike(); Configuration Default Configuration - Name: strike - Inline: The extension is applied as an inline mark. - Parse HTML: Recognizes <s>, <del>, <strike> tags, and text-decoration: line-through; style when parsing HTML input. - Render HTML: Outputs <s> tags with any additional HTML attributes. Keyboard Shortcuts - Mod-Shift-s: Toggles the strikethrough mark on or off. Input Rules - Markdown Syntax: Automatically applies the strikethrough mark when typing strike. Paste Rules - Markdown Syntax: Automatically applies the strikethrough mark when pasting strike text. Customization You can customize the Strike extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Strike } from '@fusion/extension-strike'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Strike, / other extensions /], }); HTML Output Example html <p>This text is <s>struck through</s>.</p> ",
    "url": "/extension-strike"
  },
  {
    "id": "extension-style",
    "title": "README",
    "content": " Style Extension for Fusion Editor - @fusion/extension-style Overview The Style extension for Fusion Editor allows you to embed <style> elements within the editor content. This is particularly useful for adding custom styles directly in the document or within a specific scope. Features - Embed <style> elements in the editor content. - Supports all global attributes. - Allows for the addition of custom CSS rules. Attributes - HTMLAttributes: An object to define HTML attributes for the <style> element. - Default: {} Commands - setStyleBlock: Inserts a <style> block with the provided content. typescript editor.commands.setStyleBlock({ content: 'body { background-color: black; }' }); Usage typescript import { Style } from '@fusion/extension-style'; const editor = new Editor({ extensions: [ Style.configure({ HTMLAttributes: { id: 'main-style', }, }), / other extensions / ], }); HTML Output Example html <style id=\"main-style\"> h1 { color: red; } </style> ",
    "url": "/extension-style"
  },
  {
    "id": "extension-subscript",
    "title": "README",
    "content": " Subscript Extension for Fusion Editor - @fusion/extension-subscript Overview The Subscript extension allows you to apply subscript formatting to text within the Fusion Editor. Subscript text is typically used to display text slightly below the normal line of text, such as in chemical formulas or mathematical notations. Features - Apply subscript formatting to selected text. - Toggle subscript formatting on and off. - Customize the HTML attributes applied to the <sub> element. Attributes - HTMLAttributes: HTML attributes to add to the <sub> element. - Default: {} - Example: { class: 'subscript-text' } Commands - setSubscript: Applies subscript formatting to the selected text. - Usage: editor.commands.setSubscript() - toggleSubscript: Toggles subscript formatting on or off for the selected text. - Usage: editor.commands.toggleSubscript() - unsetSubscript: Removes subscript formatting from the selected text. - Usage: editor.commands.unsetSubscript() Configuration - HTMLAttributes: Configure the attributes to be added to the <sub> tag. Keyboard Shortcuts - Mod-,: Toggles subscript formatting. Customization - You can customize the HTML attributes that are added to the <sub> tag by passing them through the HTMLAttributes option. Usage Example To use the Subscript extension, include it in your editor setup: typescript import { Subscript } from '@fusion/extension-subscript' const editor = new Editor({ extensions: [ // other extensions Subscript, ], }) HTML Output Example html <p> Almost every developer's favorite molecule is C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub>, also known as \"caffeine.\" </p> ",
    "url": "/extension-subscript"
  },
  {
    "id": "extension-superscript",
    "title": "README",
    "content": " Superscript Extension for Fusion Editor - @fusion/extension-superscript Overview The Superscript extension allows you to apply superscript formatting to text within the Fusion Editor. Superscript text is typically used to display text slightly above the normal line of text, such as in mathematical exponents. Features - Apply superscript formatting to selected text. - Toggle superscript formatting on and off. - Customize the HTML attributes applied to the <sup> element. Attributes - HTMLAttributes: HTML attributes to add to the <sup> element. - Default: {} - Example: { class: 'superscript-text' } Commands - setSuperscript: Applies superscript formatting to the selected text. - Usage: editor.commands.setSuperscript() - toggleSuperscript: Toggles superscript formatting on or off for the selected text. - Usage: editor.commands.toggleSuperscript() - unsetSuperscript: Removes superscript formatting from the selected text. - Usage: editor.commands.unsetSuperscript() Configuration - HTMLAttributes: Configure the attributes to be added to the <sup> tag. Keyboard Shortcuts - Mod-.: Toggles superscript formatting. Customization - You can customize the HTML attributes that are added to the <sup> tag by passing them through the HTMLAttributes option. Usage Example To use the Superscript extension, include it in your editor setup: typescript import { Superscript } from '@fusion/extension-superscript' const editor = new Editor({ extensions: [ // other extensions Superscript, ], }) HTML Output Example html <p>The <em>Pythagorean theorem</em> is often expressed as the following equation:</p> <p> <var>a<sup>2</sup></var> + <var>b<sup>2</sup></var> = <var>c<sup>2</sup></var> </p> ",
    "url": "/extension-superscript"
  },
  {
    "id": "extension-table",
    "title": "README",
    "content": " Table Extension Overview The TableView extension in Tiptap provides a flexible and customizable way to handle tables in your Tiptap editor. This extension enhances the native ProseMirror table functionality with additional options for controlling the behavior and appearance of tables. Features - Customizable table structure and formatting. - Built-in commands for table manipulation (e.g., adding rows, columns, and merging cells). - Easy integration with Tiptap's core functionality. - Support for table customization, including class names and attributes. Commands addTable Adds a new table with a given number of rows and columns. typescript editor.chain().focus().addTable({ rows: 3, cols: 3 }).run(); addColumnBefore Adds a new column before the currently selected column. typescript editor.chain().focus().addColumnBefore().run(); addColumnAfter Adds a new column after the currently selected column. typescript editor.chain().focus().addColumnAfter().run(); deleteColumn Deletes the currently selected column. typescript editor.chain().focus().deleteColumn().run(); addRowBefore Adds a new row before the currently selected row. typescript editor.chain().focus().addRowBefore().run(); addRowAfter Adds a new row after the currently selected row. typescript editor.chain().focus().addRowAfter().run(); deleteRow Deletes the currently selected row. typescript editor.chain().focus().deleteRow().run(); mergeCells Merges the selected cells. typescript editor.chain().focus().mergeCells().run(); splitCell Splits the currently selected merged cell. typescript editor.chain().focus().splitCell().run(); toggleHeaderRow Toggles the header row for the table. typescript editor.chain().focus().toggleHeaderRow().run(); toggleHeaderColumn Toggles the header column for the table. typescript editor.chain().focus().toggleHeaderColumn().run(); toggleCellMerge Toggles the merging state for the selected cells. typescript editor.chain().focus().toggleCellMerge().run(); Keyboard Shortcuts - Tab: Move to the next cell. If it's the last cell, add a new row and move to the next cell. - Shift-Tab: Move to the previous cell. - Backspace: Delete the table when all cells are selected. - Mod-Backspace: Delete the table when all cells are selected. - Delete: Delete the table when all cells are selected. - Mod-Delete: Delete the table when all cells are selected. Usage Example typescript import { Editor } from '@tiptap/core'; import { TableView } from './TableView'; const editor = new Editor({ extensions: [ Table.configure({ resizable: true, }), TableRow, TableHeader, TableCell, ], }); editor.commands.addTable({ rows: 3, cols: 3 }); HTML Output Example html <table> <thead> <tr> <th>Header 1</th> <th>Header 2</th> <th>Header 3</th> </tr> </thead> <tbody> <tr> <td>Row 1, Cell 1</td> <td>Row 1, Cell 2</td> <td>Row 1, Cell 3</td> </tr> <tr> <td>Row 2, Cell 1</td> <td>Row 2, Cell 2</td> <td>Row 2, Cell 3</td> </tr> </tbody> </table> ",
    "url": "/extension-table"
  },
  {
    "id": "extension-template",
    "title": "README",
    "content": " Template Extension for Fusion Editor - @fusion/extension-template Overview The Template extension adds support for the HTML <template> tag within the Fusion Editor. This allows you to work with template elements, which are used to define content that is not rendered when the page loads but can be instantiated later via JavaScript. Features - Allows for the inclusion and manipulation of <template> tags. - Supports HTML attributes configuration. Attributes - HTMLAttributes: HTML attributes to add to the <template> element. - Default: {} - Example: { class: 'my-template' } Commands - setTemplate: Adds a <template> node. - Usage: editor.commands.setTemplate() - toggleTemplate: Toggles a <template> node. - Usage: editor.commands.toggleTemplate() - unsetTemplate: Removes a <template> node. - Usage: editor.commands.unsetTemplate() Configuration - HTMLAttributes: Configure the attributes to be added to the <template> tag. Keyboard Shortcuts (If any) - No default keyboard shortcuts are defined for this extension. Customization (Optional) (If any) - Customize HTML attributes as needed for specific requirements. Usage Example To use the Template extension, include it in your editor setup: typescript import { Template } from '@fusion/extension-template' const editor = new Editor({ extensions: [ // other extensions Template, ], }) HTML Output Example html <template class=\"my-template\"> <!-- Template content goes here --> </template> ",
    "url": "/extension-template"
  },
  {
    "id": "extension-text",
    "title": "README",
    "content": " Fusion Text Extenion - @fusion/extension-text The Text extension enables the creation and manipulation of text nodes within the Fusion Editor. It is responsible for handling inline text content, allowing you to include and manage plain text within your documents. Overview The Text extension is crucial for text-based content in the editor. It defines a node type for inline text, making it possible to insert and manage text within other inline or block-level nodes. Features - Inline Node: This extension defines a node that belongs to the inline group (group: 'inline'). This means it is used for content that appears within other nodes and does not create block-level separations. Usage This node is used to represent text within inline contexts, such as within paragraphs, headings, or other inline elements. typescript import { Editor } from '@fusion/core' import { Document } from '@fusion/extension-document' import { Text } from '@fusion/extension-text' import { Paragraph } from '@fusion/extension-paragraph' const editor = new Editor({ extensions: [ Document, Text, Paragraph, // other extensions ], }) The Text extension is a fundamental part of the Fusion Editor, enabling the insertion and management of inline text content. By including it in your editor setup, you ensure that text can be effectively handled and displayed alongside other content types. ",
    "url": "/extension-text"
  },
  {
    "id": "extension-textarea",
    "title": "README",
    "content": " Textarea Extension for Fusion Editor - @fusion/extension-textarea Overview The Textarea extension for Fusion Editor allows you to use <textarea> elements within your editor. This extension supports block content and provides attributes for handling text input fields. Features - Block Content: The <textarea> element is treated as a block element. - Attributes: Adds support for name, rows, cols, placeholder, and required attributes. Attributes - name: The name of the <textarea> element. - rows: The number of visible text lines. - cols: The number of visible text columns. - placeholder: A short hint displayed in the <textarea> when it is empty. - required: Indicates whether the <textarea> must be filled out before submitting the form. Commands - setTextarea: Sets the <textarea> node with given attributes. typescript editor.commands.setTextarea({ name: 'description', rows: '4', cols: '50', placeholder: 'Enter text here', required: true }); - toggleTextarea: Toggles the <textarea> node with given attributes. typescript editor.commands.toggleTextarea({ name: 'description', rows: '4', cols: '50', placeholder: 'Enter text here', required: true }); - unsetTextarea: Unsets the <textarea> node typescript editor.commands.unsetTextarea(); Usage Example typescript import { Textarea } from '@fusion/extension-textarea'; const editor = new Editor({ extensions: [ Textarea.configure({ HTMLAttributes: { class: 'my-textarea-class', }, }), ], }); HTML Output Example html <textarea id=\"story\" name=\"story\" rows=\"5\" cols=\"33\"> It was a dark and stormy night... </textarea> ",
    "url": "/extension-textarea"
  },
  {
    "id": "extension-time",
    "title": "README",
    "content": " Time Extension for Fusion Editor - @fusion/extension-time Overview The @fusion/extension-time is a Tiptap extension that facilitates the use of the <time> HTML element in your content. The <time> element represents a specific period in time, such as a date, time of day, or duration, making your content more semantically rich. Features - Support for the datetime, pubdate, and title attributes. - Allows customization of HTML attributes. - Provides commands to set, toggle, and unset the <time> element. Attributes - datetime: A string representing the machine-readable date/time. - pubdate: A boolean indicating if the date represents the publication date. - title: A string providing additional information about the time element. Commands - setTime: Inserts a <time> element with specified attributes. - toggleTime: Toggles the <time> element on the selected text. - unsetTime: Removes the <time> element from the selected text. Configuration typescript import { Time } from '@fusion/extension-time'; const editor = new Editor({ extensions: [ Time.configure({ HTMLAttributes: { class: 'custom-time-class', }, }), ], }); Usage Example / Customization (Optional) You can customize the datetime, pubdate, and title attributes using the setTime command. For instance: typescript editor.commands.setTime({ datetime: '2024-08-30', pubdate: true, title: 'Event Date', }); HTML Output Example html <p> The Cure will be celebrating their 40th anniversary on <time datetime=\"2018-07-07\">July 7</time> in London's Hyde Park. </p> <p> The concert starts at <time datetime=\"20:00\">20:00</time> and you'll be able to enjoy the band for at least <time datetime=\"PT2H30M\">2h 30m</time>. </p> ",
    "url": "/extension-time"
  },
  {
    "id": "extension-title",
    "title": "README",
    "content": " Title Extension for Fusion Editor - @fusion/extension-title Overview The Title extension allows you to insert <title> elements, which define the title of the document, typically displayed in the browser's title bar or tab. Features - Supports the basic functionality of the <title> element. - Allows defining the document's title within the editor. Attributes - text: The text content that will be displayed as the title. Commands - setTitle: Inserts or updates a <title> element. - unsetTitle: Removes the currently selected <title> element. Configuration The extension can be configured with the following options: - HTMLAttributes: An object of HTML attributes that will be applied to the <title> element. Usage Example javascript editor.commands.setTitle({ text: 'My Document Title' }); HTML Output Example html <title>My Document Title</title> ",
    "url": "/extension-title"
  },
  {
    "id": "extension-typography",
    "title": "README",
    "content": " Typography & CustomTypography Extensions - extension-typography The Typography and CustomTypography extensions for Tiptap add automatic replacements for specific text patterns, transforming them into typographic symbols or special characters. These extensions enhance text input by applying rules for typography and currency symbols, mathematical operators, and more. Features Typography Extension The Typography extension supports the following replacements: - Em Dash (--) → — - Ellipsis (...) → … - Double Quotes (\") → “ or ” - Single Quotes (') → ‘ or ’ - Arrows (<-, ->) → ←, → - Symbols: - Copyright ((c)) → © - Trademark ((tm)) → ™ - Service Mark ((sm)) → ℠ - Registered Trademark ((r)) → ® - Fractions: - 1/2 → ½ - 1/4 → ¼ - 3/4 → ¾ - Math Operators: - Plus-Minus (+/-) → ± - Not Equal (!=) → ≠ - Multiplication () → × - Superscripts (^2, ^3) → ², ³ - Quotation Marks (<<, >>) → «, » CustomTypography Extension The CustomTypography extension supports additional custom symbols: - Currency Symbols: - Rupee ((R)) → ₹ - Dollar ((USD)) → $ - British Pound ((GBP)) → £ - Australian Dollar ((AUD)) → A$ - Euro ((e)) → € - Math Operators: - Triple Equals (===) → ≡ - Greater/Less Than or Equals (>=, <=) → ≥, ≤ - Approximation ((approx)) → ≈ - Pi ((pi)) → π - Not Equal (!=) → ≠ - Arrows: - Double Arrow (<==>) → ⇔ Configuration Both extensions allow customization of specific replacements. You can enable, disable, or override default characters by modifying the options. Example: typescript import { Typography } from './Typography'; import { CustomTypography } from './CustomTypography'; const typographyExtension = Typography.configure({ emDash: '⸻', // Custom em dash character ellipsis: false, // Disable ellipsis replacement }); const customTypographyExtension = CustomTypography.configure({ rupees: false, // Disable Rupee symbol replacement pi: 'ππ', // Custom Pi symbol }); Commands These extensions do not have commands. Instead, they use text input rules to automatically replace patterns while typing. Usage Example Integration with Tiptap Editor typescript import { Editor } from '@tiptap/core'; import { Typography } from './Typography'; import { CustomTypography } from './CustomTypography'; const editor = new Editor({ extensions: [ Typography, CustomTypography, ], content: <p>Type (c), --, or (USD) to see replacements.</p>, }); HTML Output Example Input: plaintext \"This is an example...\" \"1/2 + 1/4 = 3/4\" \"Use ==>, or type (pi)!\" Output: html <p>“This is an example…”</p> <p>½ + ¼ = ¾</p> <p>Use ⇔, or type π!</p> Customization Each replacement rule can be disabled or customized by passing options during extension configuration. ",
    "url": "/extension-typography"
  },
  {
    "id": "extension-underline",
    "title": "README",
    "content": " Underline Extension for Fusion Editor - @fusion/extension-underline Overview The Underline extension allows you to underline text within the Fusion Editor. This extension is useful for emphasizing important content or creating stylistic effects in your text. Features - Inline Mark: Renders the <u> element as an inline mark to underline text. - Command Integration: Provides commands to set, toggle, and unset underline marks. - Keyboard Shortcuts: Easily underline text using keyboard shortcuts. Attributes - HTML Attributes: Customize the HTML attributes of the <u> element using the HTMLAttributes option. Commands - setUnderline: Applies the underline mark to selected text. - toggleUnderline: Toggles the underline mark on or off. - unsetUnderline: Removes the underline mark from selected text. Configuration Default Configuration - Name: underline - Inline: The extension is applied as an inline mark. - Parse HTML: Recognizes <u> tags and text-decoration: underline; style when parsing HTML input. - Render HTML: Outputs <u> tags with any additional HTML attributes. Keyboard Shortcuts - Mod-u: Toggles the underline mark on or off. - Mod-U: (Alternate shortcut) Toggles the underline mark on or off. Customization You can customize the Underline extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Underline } from '@fusion/extension-underline'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Underline, / other extensions /], }); HTML Output Example html <p>This text is <u>underlined</u>.</p> ",
    "url": "/extension-underline"
  },
  {
    "id": "extension-var",
    "title": "README",
    "content": " Var Extension for Fusion Editor - @fusion/extension-var Overview The Var extension allows you to mark text as a variable using the <var> element, typically used to represent variables in mathematical expressions or programming contexts within the Fusion Editor. Features - Inline Mark: Renders the <var> element as an inline mark. - Command Integration: Provides commands to set, toggle, and unset variable marks. Attributes - HTML Attributes: Customize the HTML attributes of the <var> element. Commands - setVar: Applies the <var> mark to selected text. - toggleVar: Toggles the <var> mark on or off. - unsetVar: Removes the <var> mark from selected text. Configuration Default Configuration - Name: var - Inline: The extension is applied as an inline mark. - Parse HTML: Recognizes <var> tags when parsing HTML input. - Render HTML: Outputs <var> tags with any additional HTML attributes. Customization You can customize the Var extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { Var } from '@fusion/extension-var'; // Add the extension to your editor setup const editor = new Editor({ extensions: [Var, / other extensions /], }); HTML Output Example html <p> The volume of a box is <var>l</var> × <var>w</var> × <var>h</var>, where <var>l</var> represents the length, <var>w</var> the width and <var>h</var> the height of the box. </p> ",
    "url": "/extension-var"
  },
  {
    "id": "extension-wbr",
    "title": "README",
    "content": " WBR Extension for Fusion Editor - @fusion/extension-wbr Overview The WBR extension allows you to insert <wbr> elements, which represent a word break opportunity. This is useful for managing word wrapping in long text sequences within the Fusion Editor. Features - Inline Support: Renders the <wbr> element as an inline node. - Command Integration: Provides a command to insert a word break opportunity at the desired location. Attributes - HTML Attributes: Customize the HTML attributes of the <wbr> element. Commands - setWBR: Inserts a <wbr> node. Configuration Default Configuration - Name: wbr - Group: inline - Selectable: false (The element is not selectable.) - Atom: true (The element behaves as a single unit.) - Parse HTML: Recognizes <wbr> tags when parsing HTML input. - Render HTML: Outputs <wbr> tags with any additional HTML attributes. Keyboard Shortcuts Currently, there are no keyboard shortcuts provided by default for the WBR extension. Customization You can customize the WBR extension by passing in HTML attributes through the HTMLAttributes option. Usage Example typescript import { WBR } from '@fusion/extension-wbr'; // Add the extension to your editor setup const editor = new Editor({ extensions: [WBR, / other extensions /], }); HTML Output Example html <p> http://this<wbr />.is<wbr />.a<wbr />.really<wbr />.long<wbr />.example<wbr />.com/With<wbr />/deeper<wbr />/level<wbr />/pages<wbr />/deeper<wbr />/level<wbr />/pages<wbr />/deeper<wbr />/level<wbr />/pages<wbr />/deeper<wbr />/level<wbr />/pages<wbr />/deeper<wbr />/level<wbr />/pages </p> ",
    "url": "/extension-wbr"
  }
]